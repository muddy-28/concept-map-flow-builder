{"name":"Concept-map-flow-builder","tagline":"This article documents the development of a small exploratory project for flowchart visualization and editing that is built upon SVG and AngularJS. It makes good use of the MVVM pattern so that UI logic can be unit-tested","body":"<h2><a name=\"Overview\">Overview</a></h2>\r\n\r\n<p>This article documents the development of a small exploratory\r\nproject for flowchart visualization and editing that is built upon <a href=\"http://en.wikipedia.org/wiki/Svg\">SVG</a> and <a href=\"http://en.wikipedia.org/wiki/AngularJS\">AngularJS</a>. It makes good use of the <a href=\"http://en.wikipedia.org/wiki/MVVM\">MVVM</a> pattern so that UI logic can be <a href=\"http://en.wikipedia.org/wiki/Unit_testing\">unit-tested</a>.</p>\r\n\r\n<p>After so many articles on <a href=\"http://www.codeproject.com/Articles/ashley_davis#articles\">WPF</a>\r\nit may come as a surprise that I now have an article on web UI. For the\r\nlast couple of years I have been ramping up my web development skills.</p>\r\n\r\n<p>Professionally I have been using web UI in some pretty interesting\r\nways connected to game development. For example building game dev tools\r\nand in-game web UIs, but I'm not talking about that today. </p>\r\n\r\n<p>It seemed only natural that I should take my <a href=\"http://www.codeproject.com/Articles/182683/NetworkView-A-WPF-custom-control-for-visualizing-a\">NetworkView WPF article</a>\r\nand bring it over to web UI. I've always been interested in\r\nvisualization and editing of networks, graphs and flow-charts and it is\r\none of the ways that I put my skills to the test in any particular area.</p>\r\n\r\n<p>During development of the code I have certainly moved my skills forward in many areas, including <a href=\"http://en.wikipedia.org/wiki/Javascript\">Javascript</a>, <a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">TDD</a>,\r\nSVG and AngularJS. Specifically I have learned how to apply the\r\ngoodness of the MVVM pattern to web UI development. In this article I\r\nwill show how I have deployed the MVVM concepts in HTML5 and Javascript.</p><p>A\r\nlittle over a year ago I&nbsp;started developing using TDD, something I\r\nalways wanted to do when working with WPF, but never got around to it\r\n(or really appreciated the power of it). TDD has really helped me to\r\nrealize the full potential of MVVM.&nbsp;</p>\r\n\r\n\r\n\r\n\r\n\r\n<p>My first attempt at NetworkView, in WPF, took a long time.\r\nOver&nbsp;two years (in my spare-time of course!) I wrote a series of 5\r\narticles that were all building up to NetworkView. A lot of effort went\r\ninto achieving those articles! This time around the development and\r\nwriting of the article has been much quicker - only a few months\r\n(stealing 30 minutes here and there from my busy\r\nlife). &nbsp;I attribute the faster development time to the following\r\nreasons:</p>\r\n\r\n<ul><li>I set my sights much lower. The new code isn't as general purpose or as feature rich as the original NetworkView.</li>\r\n<li>I already knew how to build this kind of thing so I was able to start at a running pace.</li>\r\n<li>I have loads of experience with the MVVM pattern so I didn't have\r\nto spend much time thinking it through! This can't be understated, boy\r\nwas it hard coming to grips with WPF general purpose controls and the\r\nMVVM pattern the first time around!</li>\r\n<li>Working with web UI and Javascript (it pains me to say this) is so\r\nmuch easier and less complex than working with WPF (although I still\r\nlove&nbsp;C#, I sincerely wish they'd overhaul WPF).</li>\r\n<li>Finally, using TDD allowed me to quickly and easily overcome many\r\nof the traditional difficulties with Javascript development.\r\nImportantly I was able to refactor aggressively without having to deal\r\nwith the usual defects that arise from behavior changes.</li></ul>\r\n\r\n<p>So let's re-live my exploration of SVG + AngularJS flowcharts.</p>\r\n\r\n\r\n\r\n<h3><span>Screenshot</span></h3>\r\n\r\n\r\n\r\n\r\n<p>This is an annotated screenshot of the flowchart web app. On the\r\nleft is an editable JSON representation of the flowchart's\r\ndata-model. On the right is the graphical representation of the\r\nflowchart's view-model. Editing either side (left as text, right\r\nvisually)&nbsp;updates the other, they automatically stay in sync.</p>\r\n\r\n<p><img alt=\"Adnan Shafique\" src=\"http://www.codeproject.com/KB/scripting/709340/Screenshot.png\"></p>\r\n\r\n\r\n\r\n\r\n\r\n<h3><span>Audience</span></h3>\r\n<p>So who should read this article?</p>\r\n\r\n<p>If you are interested in developing graphical web applications using\r\nSVG and AngularJS,&nbsp;this article should help.</p>\r\n\r\n\r\n\r\n<p>You should already know a bit of&nbsp;HTML5/Javascript or be willing\r\nto learn quickly as we go. A basic knowledge of SVG and AngularJS will\r\nhelp, although I'll\r\nexpect you are learning some of that right now and I'll do my best to\r\nhelp you get on track with it. I'll expect you already know something\r\nabout MVVM, I have talked about it extensively in previous articles, if\r\nnot then don't worry I'll give an overview of what it is\r\nand why it is useful.</p>\r\n\r\n<p>I will also mention TDD as well to help you understand how it might help you as a developer.</p>\r\n\r\n\r\n\r\n<h3><span>What and Why?</span></h3>\r\n<p>This article is about a web UI redevelopment of my original <a href=\"http://www.codeproject.com/Articles/182683/NetworkView-A-WPF-custom-control-for-visualizing-a\">NetworkView WPF control</a>.\r\nAs mentioned the new code isn't as feature rich or general\r\npurpose as the original WPF control. Developing something that\r\nwas completely functional wasn't the intention, I really was just looking for a way to\r\nexercise my skills in Javascript, TDD, AngularJS and SVG and consolidate my web development skills. </p>\r\n\r\n<p>I really enjoy working with web UI. Since I was first looking at web\r\ntechnologies in the early days of my career to now I have seen many\r\nchanges in the tech landscape. Web technologies have progressed a\r\nremarkably long way and the community is alive and brimming with\r\nenthusiasm.&nbsp;</p>\r\n\r\n\r\n\r\n<p>My NetworkView article was popular and&nbsp;a rebuild in web\r\nUI seemed like a good idea. I was building\r\nsomething I already knew about so I could achieve it much quicker\r\nthan if I had started something new. However there are many parts of the original article that don't have a\r\ncounterpart in the new code. There is no zooming and panning, there is\r\nno equivalent to adorners to provide feedback. There is no templating\r\nfor different types of nodes.</p>\r\n\r\n<p>In summary, this code will be useful to you if:</p>\r\n\r\n<ul><li>You want to learn about the technologies I am talking about in this article.</li>\r\n<li>If you need a flowchart and want to adapt my code to your needs.</li>\r\n<li>You want to learn how to deploy AngularJS in a situation that is non-trivial and a little bit outside its normal use-case.</li></ul>\r\n\r\n<p>Whatever your reason for reading this article, you have some work\r\nahead of you either in understanding or modifying my code. If you are trying to make progress with\r\nAngularJS + SVG or even just web UI graphics in general, then I'm sure this will help.</p>\r\n\r\n\r\n\r\n\r\n<h3><span>Live Demo</span></h3>\r\n<p>First up let's look at the live demo. This allows you to\r\nsee what you are getting without having to get the code locally and run\r\nyour own web server (which isn't difficult anyway).</p>\r\n\r\n<p>Here is the main demo:</p>\r\n\r\n<p><a href=\"https://dl.dropboxusercontent.com/u/16408368/WebUI_FlowChart/index.html\">https://dl.dropboxusercontent.com/u/16408368/WebUI_FlowChart/index.html</a></p>\r\n\r\n<p>Here are the unit-tests:</p>\r\n\r\n<p><a href=\"https://dl.dropboxusercontent.com/u/16408368/WebUI_FlowChart/jasmine/SpecRunner.html\">https://dl.dropboxusercontent.com/u/16408368/WebUI_FlowChart/jasmine/SpecRunner.html</a></p>\r\n\r\n\r\n<h3><span>Running the code</span></h3>\r\n<p>Everything you need to run the code locally is attached to this article as a zip file.  However I recommend going to \r\n    <a href=\"https://github.com/ashleydavis/AngularJS-FlowChart\">the github repository</a> for the most up-to-date code. I recommend using <a href=\"http://www.sourcetreeapp.com/\">SourceTree</a> as an interface to Git.</p>\r\n\r\n<p>Running the sample app requires that you run it through a local web\r\nserver and view it through your browser. You could just disable your\r\nbrowser's web security and load the app in your browser directly from\r\nthe file system using <em>file://</em>. However I can't recommend that\r\nas you would have to override the security in your web browser, besides\r\nit is easier than ever to run a local web server. Let me show you how.</p>\r\n\r\n<p>I have provided a simple bare bones web server (that <a href=\"http://stackoverflow.com/questions/6084360/node-js-as-a-simple-web-server\">I found on StackOverflow</a>) that is built on <a href=\"http://nodejs.org/\">NodeJS</a>. When you have NodeJS installed open a cli and change directory to where the code is.  Run the following command:</p>\r\n\r\n<pre>node server.js</pre>\r\n\r\n<p>You now have a local web server. Point your web browser at the following URL to see the web app:</p>\r\n\r\n<p><a href=\"http://localhost:8888/\">http://localhost:8888/</a></p>\r\n\r\n<p>And to run the unit-tests:</p>\r\n\r\n<p><a href=\"http://localhost:8888/jasmine/SpecRunner.html\">http://localhost:8888/jasmine/SpecRunner.html</a></p>\r\n\r\n<p><span><span style=\"font-style: italic;\"></span></span></p><p><span><span style=\"font-style: italic;\">Update</span>: I found an even easier way to run a web server. Install &nbsp;<a href=\"https://github.com/nodeapps/http-server\"><span style=\"font-style: italic;\">http-server</span></a> using the following command:&nbsp;</span></p><pre>npm install http-server -g</pre><p><span>Navigate to the directory with the code and run the web-server:</span></p><pre>http-server</pre><h3><span>Javascript</span></h3>\r\n<p>Javascript is the language of the internet and recently I have\r\ndeveloped an appreciation for it. Sure, it has some bad\r\nparts, but if you follow <a href=\"http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742\">Crockford's advice</a> you can stick to the good parts.</p>\r\n\r\n<p>First-class functions are an important feature and very powerful.\r\nI'm really glad we (kind of) have these in C# now. Even the\r\nlatest C++ standard supports lambdas, it seems that <a href=\"http://en.wikipedia.org/wiki/Functional_programming\">function programming</a> is creeping in everywhere these days. Coming at Javascript from a classical language you may find that <a href=\"http://en.wikipedia.org/wiki/Prototype-based_programming\">prototypal inheritance</a> is rather unusual, but it is more powerful, even if difficult&nbsp;to understand.</p>\r\n\r\n<p>Once you are setup and used to it, it's hard\r\nto beat the Javascript workflow. Install Google Chrome, install a good\r\ntext editor, you now have a development environment! Including\r\nprofiling and debugging. Combine this with <a href=\"https://npmjs.org/package/node-live-reload\">node-livereload</a> \r\nand a <a href=\"http://en.wikipedia.org/wiki/Test_suite\">suite of unit-tests</a> \r\nand you have a system where your web application and unit-tests will re-run automatically <em>as you type your code</em>.  \r\nI can't emphasize enough how important this is for productivity. \r\nExtremely fast <a href=\"http://www.infoq.com/news/2011/03/agile-feedback-loops\">feedback cycles</a> are so important \r\nfor effective Agile development.</p>\r\n\r\n\r\n<h3><span>Test-driven development</span></h3>\r\n<p><a href=\"http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530/ref=sr_1_1?ie=UTF8&amp;qid=1386021460&amp;sr=8-1&amp;keywords=test+driven+development\">Test-driven development</a>\r\nhas been one of the most positive changes in my career so far. It was\r\nalways hard to keep design simple and minimize defects in code\r\nthat is rapidly evolving. As the code grows large it becomes harder to\r\nmanage, harder to keep under control and difficult to refactor. This\r\nproblem is only worse when using a&nbsp;language like\r\nJavascript.</p>\r\n\r\n\r\n\r\n<p>Unit-testing is hard. It takes effort and discipline. You can't\r\nafford to leave it until after you have developed the code - it is too easy to be lazy and just skip the\r\ntests when things seem to be working. TDD turns this around. You have to be disciplined, you have to slow\r\ndown, you are forced to write your unit-tests (otherwise you just\r\naren't doing TDD). You have to think up front about your coding, there\r\nis no way around it. Thinking before coding is always a good thing and generally all to rare. </p>\r\n\r\n\r\n\r\n<p>TDD makes you design your code for testability. This sometimes means\r\nslightly over-engineered code, but TDD means you can safely refactor on\r\nthe go, this keeps the design simple and under control. The trick\r\nto refactoring is to make the design look perfect for the evolved\r\nrequirements, even though the code has changed drastically above and beyond\r\nthe original design. When I say slightly over-engineered that's exactly what I mean, only\r\nslightly. I have seen and participated in massively over-engineered\r\ncoding. TDD for the most part has a negative effect on\r\nover-engineering. TDD means you only code what you are\r\ntesting. This ensures your code is always needed, always to the point.\r\nYour efforts are focused on the end requirements and you don't end up\r\ncoding something you don't need (unless your testing for something you\r\ndon't need, and why would you do that?). This attitude of <em>code only what you need </em>solves\r\none of the most insidious problems that developers have ever faced: it\r\nhelps to prevent development of code that will never be used. <em>Eliminate waste</em> is principle number 1 in <a href=\"http://en.wikipedia.org/wiki/Lean_software_development\">lean software development</a>.</p>\r\n\r\n<p>Creating a permanent scaffolding of unit-tests for your program prevents <a href=\"http://en.wikipedia.org/wiki/Code_rot\">code rot</a> and enables <a href=\"http://en.wikipedia.org/wiki/Refactoring\">refactoring</a>. Another thing it is good for: preserving your sanity and increasing your confidence in&nbsp;the code.</p>\r\n\r\n<p>Now granted that this web application is smallish and not overly\r\ncomplicated, however&nbsp;professionally I have used TDD on much more\r\ncomplex\r\nprograms. This web application was built in my spare time,&nbsp;only\r\nspending 30-60 minutes at a time on it. Occasionally I took a week or\r\ntwo off to concentrate on other things. Switching projects takes\r\nsignificant mental effort, but TDD makes it much easier to switch back.\r\nWhen you come back to the project you run the tests and then pick a\r\nsimple\r\nnext test to\r\nimplement. There is no better way of getting back into it again from a\r\ncold start. </p>\r\n\r\n<p>TDD has helped me keep the code-base in check as it changed, adding\r\nfeature after feature, heading towards my end goal. Along the way\r\nI refactored aggressively without adding defects. This is important. So\r\noften I have experienced refactoring go horribly wrong, I'm talking\r\nabout the kind of event that causes defects for weeks if not months.\r\nOne of TDD's most attractive benefits is a reduction in the pain\r\nassociated with constant code evolution.</p>\r\n\r\n<p>I once heard someone say&nbsp;<span style=\"font-style: italic;\">TDD is like training wheels for\r\nprogrammers</span>. I laughed at the time, but after some thought I decided\r\nthis comment, though funny, was far from the truth. I have worked on a\r\nTDD team for a year now and I can honestly say that TDD is\r\nsignificantly harder than the usual <em>fire from the hip </em>programming. It takes effort to learn and makes you slower (what I would call the <em>true cost of </em>development).\r\nTDD is very powerful and it isn't right for every project (it has\r\nlittle value in prototype or exploratory projects), but the payoff for\r\nlonger term projects is potentially enormous if you are willing to make\r\nthe investment.</p>\r\n\r\n<p>Last word. Having the unit-tests was essential for making the app\r\nwork across browsers. I didn't have to do cross-browser testing\r\nduring development. Near the end it was mostly enough to get the\r\nunit-tests working under each browser.</p>\r\n\r\n<h3><span>MVVM</span></h3>\r\n\r\n\r\n<p>Four years ago when I was first learning <a href=\"http://en.wikipedia.org/wiki/Windows_Presentation_Foundation\">WPF</a>\r\nI never would have imagined how far down the rabbit hole I was going to\r\nend up. Initially the learning curve was steep, but after two years and\r\nmultiple articles I had a good understanding of WPF and <a href=\"http://en.wikipedia.org/wiki/MVVM\">MVVM</a>.</p><p>MVVM is a <a href=\"http://en.wikipedia.org/wiki/Design_pattern\">pattern</a> evolved from <a href=\"http://en.wikipedia.org/wiki/Model_view_controller\">MVC</a>\r\nand it isn't actually that difficult to understand, although I think\r\nsomething about the combination of MVVM and WPF and the resulting\r\ncomplexities gives people (including myself) a lot of trouble in the\r\nbeginning.</p>\r\n\r\n<p>The basic concept of MVVM is pretty simple: <em>Separate your UI logic from your UI rendering so that you can unit-test your UI logic</em>. That's essentially it! It answers the question: <em>how do I unit-test my GUI?</em></p>\r\n\r\n\r\n\r\n<p>Fitting MVVM into Javascript looks a bit different, but is similar\r\nand simpler than&nbsp;MVVM under WPF.&nbsp;Javascript/HTML may not\r\nbe&nbsp;the ideal way to build an application, but it is more\r\nproductive than working with C#/WPF. I hope to\r\nshow that MVVM + web UI gives you the benefits of MVVM, minus the\r\ncomplexity of WPF (although you may not appreciate this unless you have\r\nworked with WPF).</p>\r\n\r\n\r\n\r\n\r\n<h3><span>AngularJS</span></h3>\r\n<p>I am very pleased to have discovered <a href=\"http://en.wikipedia.org/wiki/AngularJS\">AngularJS</a> right at the point where I was moving into web UI.  </p>\r\n\r\n<p><span style=\"font-weight: bold;\">What is AngularJS?&nbsp;</span><br>Probably best to learn that <a href=\"http://docs.angularjs.org/guide/introduction\">direct from the source</a>.</p>\r\n\r\n<p><span style=\"font-weight: bold;\">Why use AngularJS?&nbsp;</span><br>Well in this article I'm mostly interested in its <a href=\"http://en.wikipedia.org/wiki/Data_binding\">data-binding</a> capabilities.  AngularJS provides the magic necessary to glue your HTML view to your <a href=\"http://en.wikipedia.org/wiki/View_model\">view-model</a> and its data-bindings are trivial to use.</p>\r\n\r\n<p><span style=\"font-weight: bold;\">Why else would you use AngularJS?&nbsp;</span><br>Google <a href=\"https://www.google.com.au/search?q=reasons+to+use+AngularJS\"><em>reasons to use AngularJS</em></a> or <a href=\"https://www.google.com.au/search?q=benefits+of+AngularJS\"><em>benefits of AngularJS</em></a> and you will find many.</p>\r\n\r\n<p><span style=\"font-weight: bold;\">How does AngularJS fit in with MVVM?</span> I'm glad you asked. It looks like this:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/MVVM-AngularJS.png\"></p>\r\n\r\n<p>The <em>controller</em> sets up a <em>scope</em>. The scope contains variables that are data-bound to the <em>HTML view</em>. In the flowchart application the scope contains a reference to the <em>flowchart's</em> <a href=\"http://en.wikipedia.org/wiki/View_model\">view-model</a>, which in-turn wraps up the <em>flowchart's</em> <a href=\"http://en.wikipedia.org/wiki/Data_model\">data-model</a>.</p>\r\n\r\n\r\n\r\n<p><span style=\"font-weight: bold;\">Hang on, there is a controller?&nbsp;</span><br>Doesn't\r\nthat mean it is MVC rather than\r\nMVVM? Well to be sure AngularJS is a bit different to what we know of\r\nas MVVM. The AngularJS pattern is also different to traditional MVC.\r\nThis happens all the time: new patterns are created, old patterns are\r\nevolved or built-on, that's part of progress in software development.\r\nIt comes down to professional developers making their own patterns as\r\nthey need them and they do it all the time mostly without even thinking\r\nmuch about it. In some cases they are based on established patterns\r\nlike\r\nMVC, other times they&nbsp;are completely unique to the problem at\r\nhand. So it's no mystery that these two patterns are different\r\neven though they are similar on a deeper level. In the same way that\r\nMicrosoft gave birth to the MVVM pattern through WPF, Google have\r\ncreated their own <em>MVC-like</em> pattern through AngularJS. </p>\r\n\r\n<p>In the end it is just terminology and semantics and&nbsp;I&nbsp;consider the AngularJS controller to simply be a part of the\r\nview-model. The way I see it, the application is comprised of a data-model, a\r\nview-model and the view. Ultimately it really depends on how you think\r\nabout things, I come from a MVVM/WPF background so I see my work in\r\nlight of that, you will no doubt see it&nbsp;differently.</p>\r\n\r\n<p>AngularJS has been pleasantly simple to use with and I have\r\nencountered very few issues.\r\nSince I have been using it there has been multiple releases that have\r\nactually fixed problems that I was having. I have even delved into the\r\nsource code from time to time to gain a better understanding. Although\r\nnot trival the code is certainly very readable and understandable.</p>\r\n\r\n<p>I'll talk more about <a href=\"#Problems_with_AngularJS\">AngularJS issues</a> and solutions at the end of the article.</p>\r\n\r\n<p><span style=\"font-weight: bold;\">Want more info about AngularJS?&nbsp;</span><br>They have <a href=\"http://docs.angularjs.org/guide/\">awesome documentation</a>.</p>\r\n\r\n<h3><span>SVG</span></h3>\r\n<p>I have only paid attention to&nbsp;<a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a>\r\nin recent years, but&nbsp;it is impressive&nbsp;that it has\r\nactually been around for a long time (since 1999 according to wikipedia). </p>\r\n\r\n\r\n\r\n<p>After working with XAML I&nbsp;was amused to discover how many\r\nfeatures that Microsoft lifted straight out of SVG. That's how things\r\nwork, we wouldn't get anywhere in particular if we weren't\r\ninnovating on top of previous discoveries and inventions.</p><p>I suspect that SVG was somewhat forgotten and\r\nis now experiencing something of a renaissance. These days, SVG has <a href=\"http://caniuse.com/svg\">good browser support</a>\r\nalthough there are still issues to be aware of and some features to\r\nstay clear of. To a certain extent you can embed SVG directly in HTML and\r\ntreat it as though it were just HTML! Unfortunately you get bitten by\r\nbad library support (I'm looking at you <a href=\"http://en.wikipedia.org/wiki/Jquery\">jQuery</a>)\r\nbut I'm pleased to say that AngularJS have made progress with their SVG\r\nsupport whilst I have been developing the flowchart web application. </p>\r\n\r\n<p>I'll talk about the <a href=\"#Problems_with_SVG\">SVG issues</a> at the end of the article.</p>\r\n\r\n<h3><span>Development Environment</span></h3>\r\n<p>This is a quick outline of my development environment.</p>\r\n\r\n<p>Core tools:</p>\r\n<ul><li><a href=\"http://www.brackets.io\">BRACKETS</a></li>\r\n<li>Google Chrome (with Firefox and IE for testing)</li>\r\n<li><a href=\"https://npmjs.org/package/node-live-reload\">node-livereload</a> for automatically refreshing the browser when the code/html changes\r\n    (the GUI <a href=\"http://livereload.com/\">LiveReload</a>, although potentially awesome, is buggy as hell under Windows and barely works).</li>\r\n<li><a href=\"http://www.sourcetreeapp.com/\">SourceTree</a> for interacting with <a href=\"https://github.com/\">github</a></li>\r\n<li><a href=\"https://workflowy.com/\">Workflowy</a> for managing my todo lists</li>\r\n<li>Internet Explorer and Firefox for testing</li></ul>\r\n\r\n<p>Core libraries:</p>\r\n<ul><li><a href=\"http://jquery.com/\">JQuery</a></li>\r\n<li><a href=\"http://angularjs.org/\">AngularJS</a></li>\r\n<li><a href=\"http://pivotal.github.io/jasmine/\">Jasmine</a> for testing</li></ul>\r\n\r\n<p>Other tools:</p>\r\n<ul><li><a href=\"https://code.google.com/p/conemu-maximus5/\">Conemu</a> for command line work</li>\r\n\r\n<li><a href=\"http://nodejs.org/\">NodeJS</a> for running the simple local web server</li></ul>\r\n\r\n<p>Honorable mentions:</p>\r\n<ul><li><a href=\"http://gruntjs.com/\">GruntJS</a> is an awesome tool\r\nfor scripting your build process (I don't need it in this web app,\r\nalthough I use it generally for building both C# and Javascript\r\napplications)</li></ul>\r\n\r\n\r\n\r\n<h2><a name=\"Application_Walkthrough\">Application Walkthrough</a></h2>\r\n\r\n<h3>Overview</h3>\r\n\r\n<p>In this section we walk-through the HTML and code for\r\nthe&nbsp;flowchart application and understand how the application\r\ninteracts with\r\nthe flowchart view-model. We will mostly be looking at <em>index.html </em>and <em>app.js</em>.</p>\r\n\r\n<p>In the process we'll get a feel for how an AngularJS application works.</p>\r\n\r\n<p>The following diagram shows the <a href=\"http://docs.angularjs.org/guide/module\">AngularJS modules</a> in the application and the dependencies between them:</p>\r\n\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/AngularJS-modules.png\"></p>\r\n\r\n\r\n<p>The next diagram overviews the files in the project:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Project-Files.png\"></p>\r\n\r\n\r\n<p>And drilling down into the <em>flowchart</em> directory:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Flowchart-Files.png\"></p>\r\n\r\n<h3><span>Application Setup</span></h3>\r\n<p>Our entry point into the application is <em>index.html</em>. This contains the HTML that defines the application UI and references the necessary scripts.</p>\r\n\r\n<p>Traditionally scripts are included within the <em>head</em> element, although here only a single script is included in the <em>head</em>. This is the script that enables \r\n    <a href=\"https://npmjs.org/package/node-live-reload\">live reload</a> support:</p>\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">script</span> <span class=\"code-attribute\">src</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">http://localhost:35729/livereload.js?snipver=1\"</span><span class=\"code-keyword\">&gt;</span><span class=\"code-keyword\">&lt;/</span><span class=\"code-leadattribute\">script</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n<p>Live reload enables automatic refresh of the page within the browser\r\nwhenever the the source files have changed. This is what makes\r\nJavascript development so productive, you can change the code and have\r\nthe application reload and restart automatically, no compilation is\r\nneeded, no manual steps are needed. The feedback loop is substantially\r\nreduced.</p>\r\n\r\n<p>Live reload can also be achieved by using a browser plugin instead of adding a script. I opt for the script usually \r\nso that development can happen on any machine without requiring a browser plugin. You probably don't want live reload\r\nin production of course, so your production server should remove this script.</p>\r\n\r\n<p>To try out live reload locally ensure you have installed the <a href=\"https://npmjs.org/package/node-live-reload\">NodeJS plugin</a> and \r\n    run <em>node-live-reload</em> from the directory that contains the web page.\r\n\r\n<p>All other scripts are included from the end of the <em>body</em>\r\nelement. This allows the scripts to be loaded asynchronously as the\r\nbody of the web page is loaded. Whether scripts are included in the <em>head</em> or the <em>body</em> depends how you need your application to work.</p>\r\n\r\n\r\n<p>The first two scripts are <a href=\"http://en.wikipedia.org/wiki/Jquery\">jQuery</a> and <a href=\"http://en.wikipedia.org/wiki/AngularJS\">AngularJS</a>, the core libraries that this application builds on:</p>\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">script</span> <span class=\"code-attribute\">src</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">lib/jquery-2.0.2.js\"</span> <span class=\"code-attribute\">type</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">text/javascript\"</span><span class=\"code-keyword\">&gt;</span><span class=\"code-keyword\">&lt;/</span><span class=\"code-leadattribute\">script</span><span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">script</span> <span class=\"code-attribute\">src</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">lib/angular-1.2.3.js\"</span> <span class=\"code-attribute\">type</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">text/javascript\"</span><span class=\"code-keyword\">&gt;</span><span class=\"code-keyword\">&lt;/</span><span class=\"code-leadattribute\">script</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n<p>Next are the scripts that contain reusable code, including SVG, mouse handling and the flowchart:</p>\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">script</span> <span class=\"code-attribute\">src</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">debug.js\"</span> <span class=\"code-attribute\">type</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">text/javascript\"</span><span class=\"code-keyword\">&gt;</span><span class=\"code-keyword\">&lt;/</span><span class=\"code-leadattribute\">script</span><span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">script</span> <span class=\"code-attribute\">src</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">flowchart/svg_class.js\"</span> <span class=\"code-attribute\">type</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">text/javascript\"</span><span class=\"code-keyword\">&gt;</span><span class=\"code-keyword\">&lt;/</span><span class=\"code-leadattribute\">script</span><span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">script</span> <span class=\"code-attribute\">src</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">flowchart/mouse_capture_directive.js\"</span> <span class=\"code-attribute\">type</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">text/javascript\"</span><span class=\"code-keyword\">&gt;</span><span class=\"code-keyword\">&lt;/</span><span class=\"code-leadattribute\">script</span><span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">script</span> <span class=\"code-attribute\">src</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">flowchart/dragging_directive.js\"</span> <span class=\"code-attribute\">type</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">text/javascript\"</span><span class=\"code-keyword\">&gt;</span><span class=\"code-keyword\">&lt;/</span><span class=\"code-leadattribute\">script</span><span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">script</span> <span class=\"code-attribute\">src</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">flowchart/flowchart_viewmodel.js\"</span> <span class=\"code-attribute\">type</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">text/javascript\"</span><span class=\"code-keyword\">&gt;</span><span class=\"code-keyword\">&lt;/</span><span class=\"code-leadattribute\">script</span><span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">script</span> <span class=\"code-attribute\">src</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">flowchart/flowchart_directive.js\"</span> <span class=\"code-attribute\">type</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">text/javascript\"</span><span class=\"code-keyword\">&gt;</span><span class=\"code-keyword\">&lt;/</span><span class=\"code-leadattribute\">script</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n<p>The application code is included last:</p>\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">script</span> <span class=\"code-attribute\">src</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">app.js\"</span> <span class=\"code-attribute\">type</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">text/javascript\"</span><span class=\"code-keyword\">&gt;</span><span class=\"code-keyword\">&lt;/</span><span class=\"code-leadattribute\">script</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n<p>Now back to the top of&nbsp;<em>index.html</em>, the body element contains a number of important attributes:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">body</span>\r\n    <span class=\"code-attribute\">ng-app</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">app\"</span> \r\n    <span class=\"code-attribute\">ng-controller</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">AppCtrl\"</span>\r\n    <span class=\"code-attribute\">mouse-capture</span>\r\n    <span class=\"code-attribute\">ng-keydown</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">keyDown($event)\"</span>\r\n    <span class=\"code-attribute\">ng-keyup</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">keyUp($event)\"</span>\r\n    <span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n\r\n<p><a href=\"http://docs.angularjs.org/api/ng.directive:ngApp\"><em>ng-app</em></a> designates the root element that contains the <em>AngularJS application. </em>The value of this attribute specifies the <a href=\"http://docs.angularjs.org/guide/module\"><em>AngularJS module</em></a> that contains the application code. This is the most important attribute in the application because this is what <em>bootstraps</em> AngularJS. Without <em>ng-app </em>there is no AngularJS application. In this instance we have specified <em>app</em> which links the <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\">DOM</a> to our <em>app </em>module which is registered in <span style=\"font-style: italic;\">app.js</span>, we'll take a look at that in a moment. &nbsp;With the&nbsp;<span style=\"font-style: italic;\">ng-app</span>\r\nand the AngularJS source code included in the page, the AngularJS app\r\nis bootstrapped automatically. If necessary, for example to\r\ncontrol initialization order, you can also <a href=\"http://stackoverflow.com/questions/16537783/which-method-should-i-use-to-manually-bootstrap-my-angularjs\">manually bootstrap the AngularJS app</a>. It is interesting to note here that <em>ng-app</em>\r\nis applied to the entire body of the web page. This suits me because I\r\nwant the entire page to be an AngularJS application, however it is\r\nalso possible to put <em>ng-app</em> on any sub-element and thus only allow a portion of your page to be controlled by AngularJS.</p>\r\n\r\n<p><a href=\"http://docs.angularjs.org/api/ng.directive:ngController\"><em>ng-controller</em></a><em> </em>assigns an <a href=\"http://docs.angularjs.org/guide/controller\"><em>AngularJS</em></a><a href=\"http://docs.angularjs.org/guide/controller\"> </a><a href=\"http://docs.angularjs.org/guide/controller\"><em>controller</em></a><em> </em>to the body of the page.&nbsp;Here <em>AppCtrl</em> is assigned which is the root controller for the entire application.</p>\r\n\r\n<p><em><a href=\"#Mouse_Capture_Service\">mouse-capture</a> </em>is a custom attribute I have created to manage mouse capture within the application. </p>\r\n\r\n<p><a href=\"http://docs.angularjs.org/api/ng.directive:ngKeyup\">ng-keydown</a> and <a href=\"http://docs.angularjs.org/api/ng.directive:ngKeydown\">ng-keyup</a> link the DOM events to Javascript handler functions.</p>\r\n\r\n\r\n\r\n<p>If you already know HTML but don't know AngularJS, by now you may\r\nhave guessed that AngularJS gives you the ability to create custom HTML\r\nattributes to wire behavior and logic to your <a href=\"http://en.wikipedia.org/wiki/User_interface_markup_language\">declarative user interface</a>.\r\nIf you don't realize how amazing this is I suggest you go and do some\r\ntraditional web programming before coming back to AngularJS. AngularJS\r\nallows the extension of HTML with new elements and attributes using <a href=\"http://docs.angularjs.org/guide/directive\"><em>AngularJS directives</em></a>.&nbsp;</p><p>The <span style=\"font-style: italic;\">flow-chart</span> element is a custom element used to insert a flowchart into the page:<br></p>\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">flow-chart</span>\r\n    <span class=\"code-attribute\">style</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">margin: 5px; width: 100%; height: 100%;\"</span>\r\n    <span class=\"code-attribute\">chart</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">chartViewModel\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">flow-chart</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n<p>The <em>flow-chart</em> element is defined by a&nbsp;directive that\r\ninjects a HTML/SVG template into the DOM at this point. The directive\r\ncoordinates the components that make up the flowchart. It attaches\r\nmouse input\r\nhandlers to the DOM and translates them into actions performed against\r\nthe view-model.</p>The <em>chart</em> attribute of the <em>flow-chart</em> element&nbsp;data-binds the view-model from the application's <a href=\"http://docs.angularjs.org/guide/scope\"><em>scope</em></a> into the flowchart's <em>scope</em>.\r\nA scope is a Javascript object that contains the variables and functions\r\nthat are accessible from HTML/SVG via data-binding. In\r\nthis case we are binding <em>chartViewModel</em> to the <em>chart</em> attribute as illustrated by the following diagram:<br>\r\n\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Chart-attribute-data-binding.png\"></p>\r\n\r\n\r\n\r\n\r\n<h3><span>Application Module Setup</span></h3>\r\n\r\n\r\n<p>Let's look at <em>app.js</em> to see the application's setup of the data-model. The first line registers the <em>app </em>module:</p>\r\n\r\n<pre>angular.module(<span class=\"code-string\">'</span><span class=\"code-string\">app'</span>, [<span class=\"code-string\">'</span><span class=\"code-string\">flowChart'</span>, ])</pre>\r\n\r\n\r\n<p>Using the <a href=\"http://docs.angularjs.org/api/angular.module\"><em>module</em></a> function the <em>app</em>   \r\n<a href=\"http://docs.angularjs.org/guide/module\">module</a> is registered. \r\nThis is the same <em>app</em> that was referenced by <em>ng-app=\"app\" </em>in <em>index.html</em>.\r\nThe first parameter is the name of the module. The second parameter is\r\na list of modules that this module depends on. In this case the <em>app</em> module depends on the <em>flowChart</em> module. The <em>flowChart </em>module contains the flowchart directive and associated code, which we look at later.</p>\r\n\r\n<p>After the module, an <a href=\"http://docs.angularjs.org/guide/dev_guide.services.understanding_services\">AngularJS service</a> is <a href=\"http://docs.angularjs.org/guide/dev_guide.services.creating_services\">registered</a>.\r\nThis is the simplest example of a service and in a moment you will see\r\nhow it is used. This service simply returns the browser's <a href=\"http://www.w3schools.com/jsref/met_win_prompt.asp\"><em>prompt</em></a><em> </em>function:</p>\r\n\r\n\r\n\r\n<pre>.factory(<span class=\"code-string\">'</span><span class=\"code-string\">prompt'</span>, function () {\r\n    <span class=\"code-keyword\">return</span> prompt;\r\n}</pre>\r\n\r\n\r\n<p>Next the application's&nbsp;<a href=\"http://docs.angularjs.org/guide/controller\">controller</a> is registered:</p>\r\n\r\n\r\n\r\n\r\n<pre>.controller(<span class=\"code-string\">'</span><span class=\"code-string\">AppCtrl'</span>, [<span class=\"code-string\">'</span><span class=\"code-string\">$scope'</span>, <span class=\"code-string\">'</span><span class=\"code-string\">prompt'</span>, function AppCtrl ($scope, prompt) {\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... controller code ...\r\n</span>}])\r\n;</pre>\r\n\r\n<p>The second parameter to the&nbsp;<span style=\"font-style: italic;\">controller </span>function is&nbsp;an array that&nbsp;contains two strings and a function. The parameters of the\r\nfunction have the same names as the strings in the array. </p>\r\n\r\n<p>If it wasn't for <a href=\"http://en.wikipedia.org/wiki/Minification_%28programming%29\">minification</a> we could define the controller more simply like this:</p>\r\n\r\n\r\n\r\n\r\n<pre>.controller(<span class=\"code-string\">'</span><span class=\"code-string\">AppCtrl'</span>, function AppCtrl ($scope, prompt) {\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... controller code ...\r\n</span>})\r\n;</pre>\r\n\r\n<p>In the second case the array has been replaced only by the function which\r\nis simpler but works only during development and not in production.\r\nAngularJS instances the\r\ncontroller by calling the registered <a href=\"http://pivotallabs.com/javascript-constructors-prototypes-and-the-new-keyword/\">Javascript constructor function</a>. AngularJS knows to instance this particular controller because it was specified by name in the HTML using&nbsp;<em>ng-controller=\"AppCtrl\". </em>The controller's parameters are then satisfied by <a href=\"http://docs.angularjs.org/guide/di\">dependency injection</a> based on parameter name.&nbsp;The AngularJS implementation of dependency injection is so simple,\r\nseamless and reliable that it has convinced me in general that a good\r\ndependency injection framework should be a permanent part of my\r\nprogramming toolkit.</p>\r\n\r\n<p>Of course the simple case&nbsp;doesn't work in production where the\r\napplication has been minified. The parameter names will have been\r\nshortened or mangled, so&nbsp;we must&nbsp;provide the\r\nexplicit list of dependency names before the constructor function. It\r\nis a pity really that we have to do this, as the implicit method of\r\ndependency specification is&nbsp;more elegant.</p>\r\n\r\n<p>The <em>$scope</em> parameter is the scope automatically created by\r\nAngularJS for the controller. &nbsp;In this&nbsp;case the scope is\r\nassociated with the&nbsp;<em>body</em> element. The <a href=\"http://stackoverflow.com/questions/12648543/angularjs-and-its-use-of-dollar-variables\">dollar prefix</a> here indicates that <em>$scope</em>\r\nis provided by AngularJS itself. The dollar sign in Javascript is\r\nsimply a character that can be used in an identifier, it has no special\r\nmeaning to the interpreter.&nbsp;I suggest you don't use $ for your\r\nown variables because then you can't easily identify the variables\r\nprovided by AngularJS.</p>\r\n\r\n\r\n\r\n\r\n\r\n<p>The <em>prompt </em>parameter is the <em>prompt</em> service that we saw a moment ago. AngularJS automatically instances the <em>prompt</em> service from the factory we registered earlier. The question you might be asking now is why decouple the <em>prompt</em> service from the application controller? Well generally it so that we can unit-test\r\nthe application controller, even though I don't bother testing the\r\napplication code in this case (although I do test the flowchart code,\r\nwhich you'll see later). The decoupling means the prompt service can be\r\n<a href=\"http://en.wikipedia.org/wiki/Mock_object\">mocked</a> thus <a href=\"http://c2.com/cgi/wiki?UnitTestIsolation\">isolating</a> the code that we want to test. In this case, the only reason I decoupled the prompt<em> </em>service is simply because I wanted to take the opportunity to demonstrate in the simplest scenario how and why to use a service.</p>\r\n\r\n<h3><span>Application Controller Setup</span></h3><p>Now let's break down&nbsp;the application controller from&nbsp;<span style=\"font-style: italic;\">app.js</span>:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>.controller(<span class=\"code-string\">'</span><span class=\"code-string\">AppCtrl'</span>, [<span class=\"code-string\">'</span><span class=\"code-string\">$scope'</span>, <span class=\"code-string\">'</span><span class=\"code-string\">prompt'</span>, function AppCtrl ($scope, prompt) {\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... Various private variables used by the controller ...\r\n</span>\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... Create example data-model of the chart ...\r\n</span>\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... Define application level key event handlers ...\r\n</span>\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... Functions for adding/removing nodes and connectors ...\r\n</span>\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... Create of the view-model and assignment to the AngularJS scope ...\r\n</span>}])\r\n;</pre>\r\n\r\n<p>For the moment we will skip&nbsp;the details of the chart data-model. We will come back to that next section.</p>\r\n\r\n<p>The most important thing that happens in the application controller\r\nis the instantiation of the view-model at the end of the&nbsp;function:</p>\r\n\r\n<pre>$scope.chartViewModel = <span class=\"code-keyword\">new</span> flowchart.ChartViewModel(chartDataModel);</pre>\r\n\r\n<p><span style=\"font-style: italic;\">C</span><em>hartViewModel</em>&nbsp;wraps&nbsp;the data-model and is&nbsp;assigned&nbsp;to the scope making it&nbsp;accessible from\r\nthe HTML. This allows us to data-bind the <em>chart</em> attribute to <em>chartViewModel</em> as we have seen in <em>index.html</em>:</p>\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">flow-chart</span>\r\n    <span class=\"code-attribute\">style</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">margin: 5px; width: 100%; height: 100%;\"</span>\r\n    <span class=\"code-attribute\">chart</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">chartViewModel\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">flow-chart</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n\r\n<p>The application controller creates the flowchart view-model\r\nso that it may have direct access to its services. This was an important\r\ndesign decision. Originally the application created only the data-model\r\nwhich was&nbsp;passed directly to the flowchart directive,&nbsp;internally then the\r\nflowchart directive wrapped the data-model in the view-model. I found\r\nthat this strategy gave the application inadequate control over the UI. As an\r\nexample consider <span style=\"font-style: italic;\">deleting selected</span> flowchart items. The <span style=\"font-style: italic;\">delete </span>key is handled&nbsp;and the application must call into the view-model to delete the <em>currently selected</em>\r\nflowchart items. The initial strategy was to delete the elements\r\ndirectly\r\nfrom the data-model and have the directive detect this and update the\r\nview-model accordingly, however this failed because there is no way to\r\nknow from the data which items are selected! In addition it made the\r\nflowchart directive more complicated because it would now have to <span style=\"font-style: italic;\">watch</span> the data-model changes,\r\nnormally it just watches the view-model and this happens automatically\r\nanyway.&nbsp; A naive approach would have been&nbsp;to add fields to\r\nthe data-model to indicate which items are selected,\r\nbut this would be&nbsp;bad design:&nbsp;polluting the data-model with\r\nview specific\r\nconcepts! In any case, changing the data-model to support selection (or\r\nother view features) would mean that you can't then share the\r\ndata-model\r\nbetween completely different kinds of views, so you can see that even\r\nin\r\nprinciple it is just wrong to combine the view-model and data-model\r\nconcepts. The better solution is to have a\r\nview-model that is distinct from the flowchart\r\ndirective and mimics the structure of the data-model. The application\r\nis then put&nbsp;in direct control of that\r\nview-model so it can be manipulated directly.</p><p>The following diagram indicates the dependencies between the application and the flowchart components:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Application_-directive-and-VM.png\"></p>\r\n\r\n<p>As an example of how the application interacts with the view-model we will look at the previously mentioned&nbsp;<span style=\"font-style: italic;\">delete selected </span>feature, that allows deletion of flowchart items.&nbsp;<a href=\"http://docs.angularjs.org/api/ng.directive:ngKeyup\">ng-keyup</a> is handled for the <span style=\"font-style: italic;\">body&nbsp;</span>element:</p>\r\n\r\n<pre>ng-keyup=<span class=\"code-string\">\"</span><span class=\"code-string\">keyUp($event)\"</span></pre>\r\n\r\n\r\n<p>The browser's <a href=\"http://www.w3schools.com/jsref/event_onkeyup.asp\">onkeyup</a> event is bound to&nbsp;<em>keyUp</em> in the application scope. The <em>$event</em> object is made available for use by AngularJS and is passed&nbsp;as a parameter to <em>keyUp</em>. This should be pretty much the same as the <a href=\"http://en.wikipedia.org/wiki/Jquery\">jQuery</a> event object, although the <a href=\"http://docs.angularjs.org/api\">AngularJS docs</a> doesn't have much to say about it.</p>This diagram illustrates the binding:\r\n\r\n<p><img src=\"http://www.codeproject.com/KB/scripting/709340/ng-keyUp-binding.png\" alt=\"\"></p>\r\n\r\n<p>The <em>keyUp</em> function is defined in <em>app.js </em>and assigned directly to the application scope:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>$scope.keyUp = function (evt) {\r\n\r\n    <span class=\"code-keyword\">if</span> (evt.keyCode === deleteKeyCode) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>        <span class=\"code-comment\">//</span><span class=\"code-comment\"> Delete key.\r\n</span>        <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>        $scope.chartViewModel.deleteSelected();\r\n    }\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... handling for other keys ...\r\n</span>};</pre>\r\n\r\n<p>The <em>keyUp</em> function simply calls&nbsp;<em>deleteSelected </em>on&nbsp;the\r\nview-model. This is an example of the application directly manipulating\r\nthe flowchart view-model, later we'll have a closer look at this\r\nfunction.</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h3><span>Flowchart Data Model Setup</span></h3>\r\n<p>Let's back up and look at the setup of the flowchart's data-model.</p>\r\n\r\n<p>The example-data model is defined inline in <em>app.js:</em></p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>var chartDataModel = {\r\n    nodes: [\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> Nodes defined here.\r\n</span>    ],\r\n    connections: [\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> Connections defined here.\r\n</span>    ]\r\n};</pre>\r\n\r\n\r\n<p>Then&nbsp;it is wrapped by the view-model:</p>\r\n\r\n<pre>$scope.chartViewModel = <span class=\"code-keyword\">new</span> flowchart.ChartViewModel(chartDataModel);</pre>\r\n\r\n\r\n<p>We could also&nbsp;have <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">asynchronously loaded</a> the data-model as a <a href=\"http://en.wikipedia.org/wiki/Json\">JSON</a> file.</p>\r\n\r\n\r\n\r\n<p>Before digging further into the structure of the data-model, you may want to develop\r\na better understanding of the components of a flowchart. Rather\r\nthan prepare&nbsp;fresh diagrams, I'll refer to those from my older\r\narticle. Please take a look at the <a href=\"http://www.codeproject.com/Articles/182683/NetworkView-A-WPF-custom-control-for-visualizing-a#Overview\">Overview of Concepts</a> in that article and then come back. &nbsp;...</p>\r\n\r\n<p>Ok, so you read the overview right?  And you know the difference between&nbsp;nodes, connectors and connections.</p>\r\n\r\n<p>Here is the definition of a single node as defined in <em>app.js</em>:</p>\r\n\r\n<p><img src=\"http://www.codeproject.com/KB/scripting/709340/Node-data-model.png\"></p>\r\n\r\n\r\n<p>Here is the definition of a single connection:</p>\r\n\r\n<p><img src=\"http://www.codeproject.com/KB/scripting/709340/Connection-data-model.png\"></p>\r\n\r\n\r\n<p>Connections in the data-model&nbsp;reference their attached nodes by IDs. &nbsp;Connectors are referenced by\r\nindex. An alternative approach would be to drop the node reference and\r\nreference only the connector by an ID that is unique for each connector\r\nin the flowchart.</p>\r\n\r\n\r\n\r\n\r\n\r\n<h2><a name=\"Flowchart_Walkthrough\">Flowchart Walkthrough</a></h2>\r\n\r\n<h3><span>Overview</span></h3>\r\n\r\n<p>This section examines the implementation of the flowchart directive, controller, view-model and template.</p>\r\n\r\n<p>An&nbsp;<a href=\"http://docs.angularjs.org/guide/directive\">AngularJS directive</a> is registered with the name <span style=\"font-style: italic;\">flow-chart</span>. &nbsp;When AngularJS bootstraps and encounters the <em>flow-chart</em> element in the DOM it automatically instantiates the directive. The directive then specifies a template and this replaces the <em>flow-chart</em> tag in the HTML. The directive also specifies the controller and dictates the setup of its scope.</p>\r\n\r\n<p>The flowchart directive controls and coordinates the other components as shown in the following diagram:</p>\r\n\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Flowchart-internals.png\"></p>\r\n\r\n<p>The flowchart directive and controller are defined in <em>flowchart_directive.js</em> under the <em>flowchart</em> directory. The first line defines the AngularJS module:</p>\r\n\r\n<pre>angular.module(<span class=\"code-string\">'</span><span class=\"code-string\">flowChart'</span>, [<span class=\"code-string\">'</span><span class=\"code-string\">dragging'</span>] )</pre>\r\n\r\n\r\n<p>The module depends on the <a href=\"#Dragging_Service\"><em>dragging</em></a> module, which provides <em>mouse handling </em>services.</p>\r\n\r\n<p>This module actually contains two AngularJS directives:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>.directive(<span class=\"code-string\">'</span><span class=\"code-string\">flowChart'</span>, function() {\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>})\r\n.directive(<span class=\"code-string\">'</span><span class=\"code-string\">chartJsonEdit'</span>, function () {\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>})</pre>\r\n\r\n\r\n<p>The <em>flowChart </em>directive specifies the <a href=\"http://en.wikipedia.org/wiki/Svg\">SVG</a> template and the flowchart controller. &nbsp;We will look at this in detail in the next section.</p>\r\n\r\n<p>The <em>chartJsonEdit</em> directive is a helper that allows us to see and edit the flowchart's <a href=\"http://en.wikipedia.org/wiki/Json\">JSON</a>\r\nrepresentation alongside the visual SVG representation. This is mostly\r\nfor testing, debugging and helping understand how the flowchart works,\r\nyou probably wont't use this in production, but I have left it in as it provides a good example of how two\r\n<em>views</em> can display the same <em>view-model</em>,  we'll look into this in more detail later.</p>\r\n\r\n<p>After the two directives, the flowchart controller takes up the majority of this file:</p>\r\n\r\n\r\n\r\n\r\n<pre>.controller(<span class=\"code-string\">'</span><span class=\"code-string\">FlowChartController'</span>, [<span class=\"code-string\">'</span><span class=\"code-string\">$scope'</span>, <span class=\"code-string\">'</span><span class=\"code-string\">dragging'</span>, <span class=\"code-string\">'</span><span class=\"code-string\">$element'</span>, \r\n    function FlowChartController ($scope, dragging, $element) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>    }\r\n])\r\n;</pre>\r\n\r\n<p>In the coming sections we will cover each of the flowchart components in detail.</p>\r\n\r\n<h3>Components Overview<span></span></h3><h4><span>Flowchart Directive</span></h4>\r\n\r\n\r\n<p>Using a directive to implement the flowchart is essentially making it into a reusable <a href=\"http://en.wikipedia.org/wiki/GUI_control\"><em>control</em></a>. The entire directive is small and self-contained:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>.directive(<span class=\"code-string\">'</span><span class=\"code-string\">flowChart'</span>, function() {\r\n    <span class=\"code-keyword\">return</span> {\r\n        restrict: <span class=\"code-string\">'</span><span class=\"code-string\">E'</span>,\r\n        templateUrl: <span class=\"code-string\">\"</span><span class=\"code-string\">flowchart/flowchart_template.html\"</span>,\r\n        replace: <span class=\"code-keyword\">true</span>,\r\n        scope: {\r\n            chart: <span class=\"code-string\">\"</span><span class=\"code-string\">=chart\"</span>,\r\n        },\r\n\r\n        controller: <span class=\"code-string\">'</span><span class=\"code-string\">FlowChartController'</span>,\r\n    };\r\n})</pre>\r\n\r\n\r\n<p>The directive is restricted to use as a HTML element:</p>\r\n\r\n<pre>restrict: <span class=\"code-string\">'</span><span class=\"code-string\">E'</span></pre>\r\n\r\n\r\n<p>This effectively creates a new HTML element, <em>such is the power of\r\nAngularJS</em>, you can extend HTML with your own elements and attributes.\r\nThere are other codes that can be applied here, for example, restricting to use as a HTML\r\nattribute (effectively creating a new HTML attribute):</p>\r\n\r\n<pre>restrict: <span class=\"code-string\">'</span><span class=\"code-string\">A'</span></pre>\r\n\r\n\r\n<p>The next two lines specify the flowchart's template and that it should replace the <em>flow-chart</em> element:</p>\r\n\r\n\r\n<pre>templateUrl: <span class=\"code-string\">\"</span><span class=\"code-string\">flowchart/flowchart_template.html\"</span>,\r\nreplace: <span class=\"code-keyword\">true</span>,</pre>\r\n\r\n\r\n<p>This causes the template to be injected into the DOM in place of the <em>flowchart</em> element:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Template-replacement.png\"></p>\r\n\r\n<p>Next, an <a href=\"http://umur.io/angularjs-directives-using-isolated-scope-with-attributes/\">isolated scope</a> is setup:</p>\r\n\r\n\r\n\r\n<pre>scope: {\r\n    chart: <span class=\"code-string\">\"</span><span class=\"code-string\">=chart\"</span>,\r\n},</pre>\r\n\r\n<p>This has the effect of creating a new child scope\r\nfor the directive that is independent of the application's scope. \r\nNormally, creation of a new scope (say by a sub-controller) results in a child scope being nested under the parent scope.\r\nThe child scope is linked to the parent via <a href=\"http://jimhoskins.com/2012/12/14/nested-scopes-in-angularjs.html\">the prototypal inheritance chain</a>, therefore the fields and functions of the parent are avaible via the child and may even be overridden by the child. \r\nAn isolated scope breaks this connection, which is important for a reusable control like the flowchart as we don't want the two scopes interfering with each other. </p>\r\n\r\n<p>Note the line:</p>\r\n\r\n<pre>chart: <span class=\"code-string\">\"</span><span class=\"code-string\">=chart\"</span>,</pre>\r\n\r\n\r\n<p>This causes the <em>chart </em>attribute of the HTML element to be <a href=\"http://en.wikipedia.org/wiki/Data_binding\">data-bound</a> to the <em>chart</em>\r\nvariable in the scope. In this way we connect the chart's\r\nview-model from the application scope to the flowchart scope in a <a href=\"http://en.wikipedia.org/wiki/Declarative_programming\">declarative manner</a>.</p>\r\n\r\n<p>The last part of the directive links it to the controller:</p>\r\n\r\n<pre>controller: <span class=\"code-string\">\"</span><span class=\"code-string\">FlowChartController\"</span>,</pre>\r\n\r\n\r\n<p>AngularJS creates the controller by name when the directive is instantiated.</p>\r\n\r\n<p>Most examples of directives you see in the wild have a <em>link</em> function. In this case I use a controller instead&nbsp;of a <em>link</em> function to contain the directive's UI logic, I'll soon explain why. </p>\r\n\r\n\r\n\r\n<h4><span>JSON Editing Directive</span></h4>\r\n\r\n\r\n<p>The other directive defined in the same file is <em>chartJsonEdit</em>, which displays the flowchart's data-model as editable JSON text. This is really just a helper and not a crucial flowchart component.\r\nI use it for debugging and testing and it can also be useful to\r\nunderstand how things work generally. I include it here mainly because\r\nit is interesting to see how two separate <span style=\"font-style: italic;\">views</span> (if we consider the directives as <span style=\"font-style: italic;\">views</span>) can display the same view-model and stay synchronized.</p>I'll include the full code and comments here. The main thing to note is how the syncrhonization is achieved. <span style=\"font-style: italic;\"><a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$watch\">$watch</a> </span>watches\r\nfor a change in the data-model. Whenever a change is detected the data-model is seralized to JSON and displayed in the\r\ntextbox. Whenever the user updates the textbox an&nbsp;event is invoked and\r\nthe view-model is rebuilt from the updated data. &nbsp;A <a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$digest\">$digest</a> is invoked manually so that AngularJS responds to the updated view-model.<p></p>\r\n\r\n<pre>.directive(<span class=\"code-string\">'</span><span class=\"code-string\">chartJsonEdit'</span>, function () {\r\n    <span class=\"code-keyword\">return</span> {\r\n        restrict: <span class=\"code-string\">'</span><span class=\"code-string\">A'</span>,\r\n\r\n        scope: {\r\n            viewModel: <span class=\"code-string\">\"</span><span class=\"code-string\">=\"</span>\r\n        },\r\n\r\n        link: function (scope, elem, attr) {\r\n            <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>            <span class=\"code-comment\">//</span><span class=\"code-comment\"> Serialize the data model as json and update the textarea.\r\n</span>            <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>            var updateJson = function () {\r\n\r\n                <span class=\"code-keyword\">if</span> (scope.viewModel) {\r\n                    var json = JSON.stringify(scope.viewModel.data, null, <span class=\"code-digit\">4</span>);\r\n                    $(elem).val(json);\r\n                }\r\n            };\r\n\r\n            <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>            <span class=\"code-comment\">//</span><span class=\"code-comment\"> First up, set the initial value of the textarea.\r\n</span>            <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>            updateJson();\r\n\r\n            <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>            <span class=\"code-comment\">//</span><span class=\"code-comment\"> Watch for changes in the data model and update the textarea whenever necessary.\r\n</span>            <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>            scope.$watch(<span class=\"code-string\">\"</span><span class=\"code-string\">viewModel.data\"</span>, updateJson, <span class=\"code-keyword\">true</span>);\r\n\r\n            <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>            <span class=\"code-comment\">//</span><span class=\"code-comment\"> Handle the change event from the textarea and update the data model\r\n</span>            <span class=\"code-comment\">//</span><span class=\"code-comment\"> from the modified json.            \r\n</span>            <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>            $(elem).bind(<span class=\"code-string\">\"</span><span class=\"code-string\">input propertychange\"</span>, function () {\r\n\r\n                var json = $(elem).val();\r\n                var dataModel = JSON.parse(json);\r\n                scope.viewModel = <span class=\"code-keyword\">new</span> flowchart.ChartViewModel(dataModel);\r\n\r\n                scope.$digest();\r\n            });\r\n        }\r\n    };\r\n})</pre>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h4><span>Flowchart Controller</span></h4>\r\n<p>The purpose of the controller is to provide the input event handlers that are bound to the DOM by the template.  Event handling is then generally routed to the view-model. As the UI logic is\r\ndelegated to the view-model, the controller's job is simply to translate input\r\nevents into view-model operations. This job could have easily been done by the directive's <em>link</em> function, however separating the UI logic out to the controller\r\nhas made it much easer to unit-test as the controller\r\ncan be instantiated without a DOM.</p>\r\n\r\n<p>The controller is registered in <em>flowchart_directive.js</em> after the two directives and takes up most of the&nbsp;file. The controller itself is a <a href=\"http://pivotallabs.com/javascript-constructors-prototypes-and-the-new-keyword/\">Javascript constructor function</a> registered via the flowchart module's <a href=\"http://docs.angularjs.org/api/angular.Module\"><em>controller</em></a> function:</p>\r\n\r\n\r\n\r\n\r\n\r\n<pre>.controller(<span class=\"code-string\">'</span><span class=\"code-string\">FlowChartController'</span>, [<span class=\"code-string\">'</span><span class=\"code-string\">$scope'</span>, <span class=\"code-string\">'</span><span class=\"code-string\">dragging'</span>, <span class=\"code-string\">'</span><span class=\"code-string\">$element'</span>, \r\n    function FlowChartController ($scope, dragging, $element) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>    }\r\n])\r\n;</pre>\r\n\r\n<p>The controller is registered with the name <em>FlowChartController</em>, which is the name used to reference the controller from the directive:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Directive_references_controller.png\"></p>\r\n\r\n\r\n<p>The controller parameters are automaticatically created and <a href=\"http://en.wikipedia.org/wiki/Dependency_injection\">dependency injected</a> by AngularJS when the controller is instantiated. As we saw with the application\r\ncontroller the names of the parameters are specified twice. If we\r\ndidn't need <a href=\"http://en.wikipedia.org/wiki/Minification_%28programming%29\">minification</a>\r\nwe could get by with the names only specified once, as the names of the parameters themselves.</p>\r\n\r\n<p><em>$scope</em> is the directive's isolated scope, containing a <em>chart</em> field that is the view-model that has been transferred\r\nover from the application's scope.</p>\r\n\r\n<p><em>dragging</em> is a custom service that helps with mouse handling, which is so interesting it gets its <a href=\"#Dragging_Service\">own section</a>.</p>\r\n\r\n<p><em>$element </em>is the HTML element that the controller is attached to. This parameter is easily <a href=\"http://en.wikipedia.org/wiki/Mock_object\">mocked</a> for unit-testing, which allows testing of the controller without actually instantiating the DOM.</p>\r\n\r\n\r\n<p>In the first line of the controller we cache the <a href=\"http://bonsaiden.github.io/JavaScript-Garden/#function.this\"><em>this</em></a> variable as a local variable named <em>controller</em>:</p>\r\n\r\n<pre>var controller = <span class=\"code-keyword\">this</span>;</pre>\r\n\r\n<p>This is the same as Javascript's usual <a href=\"http://stackoverflow.com/questions/80084/in-javascript-why-is-the-this-operator-inconsistent\"><em>var that = this</em></a><em> </em>idiom and is required so that the <em>this </em>variable, i.e. the flowchart controller, can be accessed from anonymous callback functions.</p>\r\n\r\n<p>Next we cache a reference to the <a href=\"http://www.w3schools.com/jsref/dom_obj_document.asp\"><em>document</em></a><em> </em>and <a href=\"http://en.wikipedia.org/wiki/Jquery\"><em>jQuery</em></a>:</p>\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">this</span>.document = document;\r\n\r\n<span class=\"code-keyword\">this</span>.jQuery = function (element) {\r\n    <span class=\"code-keyword\">return</span> $(element);\r\n}</pre>\r\n\r\n<p>This enables unit-testing as <em>document</em> and <em>jQuery </em>are easily replaced by mock objects.</p>\r\n\r\n<p>Next we setup the scope variables, followed by a\r\nnumber of the controller's functions. Then event handlers, such as <em>mouseDown</em>, are assigned to the scope \r\nto be referenced from the template.</p>\r\n\r\n<p>That's all the detail on the controller for now, there is still a lot to cover here and we'll deal with it\r\npiece by piece in coming sections.</p>\r\n\r\n\r\n\r\n<h4><span>Flowchart Template</span></h4>\r\n<p>The template defines the SVG that makes up the flowchart visuals. It is entirely self-contained with no sub-templates. Sub-templates are of course possible with AngularJS (and usually desirable), but they can cause <a href=\"#Problems_with_SVG\">problems with SVG</a>.\r\nThe template generates the UI from&nbsp;the view-model and determines how\r\nDOM events are bound to functions in the scope.</p>\r\n\r\n<p>The template can be found in <em>flowchart_template.html</em>. After understanding the flowchart directive we know that the&nbsp;template's content completely replaces the <em>flow-chart</em> element in <em>index.html</em>.</p>\r\n\r\n<p>The entire template is wrapped in a single root <a href=\"http://www.w3schools.com/svg/svg_inhtml.asp\">SVG element</a>:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">svg</span>\r\n    <span class=\"code-attribute\">class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">draggable-container\"</span>\r\n    <span class=\"code-attribute\">xmlns</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">http://www.w3.org/2000/svg\"</span>\r\n    <span class=\"code-attribute\">ng-mousedown</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">mouseDown($event)\"</span>\r\n    <span class=\"code-attribute\">ng-mousemove</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">mouseMove($event)\"</span>  \r\n    <span class=\"code-keyword\">&gt;</span>\r\n    <span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">defs</span><span class=\"code-keyword\">&gt;</span>\r\n        <span class=\"code-keyword\">&lt;!--</span><span class=\"code-keyword\"><span class=\"code-comment\"> ... </span>--&gt;</span>\r\n    <span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">defs</span><span class=\"code-keyword\">&gt;</span>\r\n\r\n    <span class=\"code-keyword\">&lt;!--</span><span class=\"code-keyword\"><span class=\"code-comment\"> ... content ... </span>--&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">svg</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n<p>Mouse handling is performed at multiple levels in the DOM. <em>Mouse down</em> and <em>mouse move</em>\r\nare handled on the SVG element to implement <a href=\"#Drag_Selection\">drag selection</a> and <a href=\"#Mouse_Over_and_SVG_Hit_Testing\">mouse\r\nover</a>. Other examples of mouse handling can be found through-out the\r\ntemplate as it underpins multiple features, such as: <em>selection of nodes and connections</em>, <em>dragging of\r\nnodes</em> and <em>dragging of connections</em>.</p>\r\n\r\n\r\n\r\n\r\n\r\n<p>The <a href=\"http://tutorials.jenkov.com/svg/defs-element.html\">defs</a> element defines a single reusable SVG <a href=\"http://www.w3schools.com/svg/svg_grad_linear.asp\"><em>linearGradient</em></a><em> </em>that\r\nis used to fill the background of the nodes. The remainder of the\r\ntemplate is the content that displays the nodes, connectors and\r\nconnections. Near the end of the template graphics are defined for the <em>dragging connection</em> (the connection the user is dragging out) and the <em>drag selection rectangle</em>.</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<h4><span>Flowchart View-Model</span></h4>\r\n\r\n\r\n<p>The view-model closely wraps the data-model and represents it to the\r\nview. It provides UI logic and coordinates operations on\r\nthe data. The view-model can be found in <em>flowchart_viewmodel.js</em>.</p>\r\n\r\n\r\n\r\n<p style=\"font-weight: bold;\">So really, why have a view-model at all?</p>\r\n\r\n<p>It's true that all the flowchart code could live in the flowchart\r\ncontroller, or even in the flowchart directive. We already know that\r\nthe flowchart controller is separate for ease\r\nof unit-testing. Separating the <em>view-model</em> also helps \r\nunit-testing, as well as improving modularity and simplifying the code. \r\nHowever, the primary reason for separation of the view-model is that it \r\nallows the application code to interact directly with\r\nthe view-model, which is much more convenient than interacting with the directive or controller.\r\nSimply put, the application owns the view-model which it passes to the directive/controller. \r\nThe application is then free to directly manipulate the view-model\r\nand the application code doesn't interface at all with the directive\r\nor controller.</p>\r\n\r\n\r\n\r\n<em>flowchart_viewmodel.js </em>contains multiple <a href=\"http://www.phpied.com/3-ways-to-define-a-javascript-class/\">Javascript classes</a> that comprise the view-model:&nbsp;<em>ConnectorViewModel</em>, <em>NodeViewModel</em>, <em>ConnectionViewModel</em> and <em>ChartViewModel</em>.\r\nTo be sure this file is borderline too large! If much more code were \r\nadded I'd refactor and split it out into a separate file\r\nfor each component. All the view-model <a href=\"http://pivotallabs.com/javascript-constructors-prototypes-and-the-new-keyword/\">constructor functions</a> are contained within the <em>flowchart </em>object which creates a <a href=\"http://thanpol.as/javascript/development-using-namespaces/\">namespace</a> for the view-model code.</p>\r\n\r\n\r\n\r\n<p>All of the constructor functions take as a parameter (at least) the data-model to be wrapped-up. The data-model in the simplest case can be an empty object:</p>\r\n\r\n\r\n<pre>var chartDataModel = {};\r\nvar chartViewModel = <span class=\"code-keyword\">new</span> flowchart.ChartViewModel(chartDataModel);</pre>\r\n\r\n\r\n\r\n\r\n<p>When the data-model is empty, the view-model will flesh it out as necessary. \r\nA view-model can also be created from a fully or partially complete data-model, \r\nfor example one that is AJAX'd&nbsp;as JSON:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>var chartDataModel = {\r\n    nodes: [\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>    ],\r\n    connections: [\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>    ]\r\n};\r\n\r\nvar chartViewModel = <span class=\"code-keyword\">new</span> flowchart.ChartViewModel(chartDataModel);</pre>\r\n\r\n\r\n<p>View-models for each node are created in a similar way:</p>\r\n\r\n<pre>var nodeViewModel = <span class=\"code-keyword\">new</span> flowchart.NodeViewModel(nodeDataModel);</pre>\r\n\r\n\r\n<p>Connectors are a bit different, the x, y coordinates of the\r\nconnector are computed and passed in, along with a reference to the\r\nview-model of the parent node:</p>\r\n\r\n<pre>var connectorViewModel = <span class=\"code-keyword\">new</span> flowchart.ConnectorViewModel(connectorDataModel, computedX, computedY, parentNodeViewModel);</pre>\r\n\r\n\r\n<p>Connections are different again and given references to the view-models for the source and dest connectors they are attached to:</p>\r\n\r\n<pre>var connectionViewModel = <span class=\"code-keyword\">new</span> flowchart.ConnectionViewModel(connectionDataModel, sourceConnectorViewModel, destConnectorViewModel);</pre>\r\n\r\n\r\n<p>The following diagram illustrates how the view-model wraps the data-model:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/VM-wraps-data-model.png\"></p>\r\n\r\n\r\n<p>In summary, the flowchart view-model wraps up numerous functions for\r\nmanipulating and presenting the flowchart. Including selection, drag\r\nselection, deleting nodes and connections and creating new connections.</p>\r\n\r\n\r\n\r\n\r\n<h4><span>Unit Tests</span></h4>\r\n\r\n\r\n<p>TDD and the unit-tests have kept this project alive and kicking\r\nfrom the start.&nbsp;The unit tests really came into their own and saved the day when it was\r\ntime to make my code run on multiple browsers (arguably I should have\r\nbeen doing this from the beginning, but I'm pretty new to the\r\ncross-browser stuff).</p>\r\n\r\n<p>As a standard unit-test files have the same name as the source file under test, but with <em>.spec </em>on the end.  For example the unit-tests for <em>flowchart_viewmodel.js</em> are in <em>flowchart_viewmodel.spec.js</em>.</p>\r\n\r\n<p><a href=\"http://pivotal.github.io/jasmine/\"><em>Jasmine</em></a> is a fantastic testing framework. Along with the code I have included the Jasmine <em>spec runner</em>, the HTML page that runs the tests. It is under the <em>jasmine</em> directory. When you have the web server running you can point your browser at <a href=\"http://localhost:8888/jasmine/SpecRunner.html\">http://localhost:8888/jasmine/SpecRunner.html</a> to run the unit-tests.</p>\r\n\r\n<h3><span>Graph Concepts</span></h3>\r\n\r\n<p>In this section I discuss each element of the flowchart and what is required to represent it in the UI.\r\n\r\n<h4><span>Representing nodes</span></h4>\r\n\r\n\r\n<p>To render a collection of things, eg flowchart nodes, we use AngularJS's <a href=\"http://docs.angularjs.org/api/ng.directive:ngRepeat\"><em>ng-repeat</em></a>. Here it is used to render all of the nodes in the view-model:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">g</span>\r\n    <span class=\"code-attribute\">ng-repeat</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">node in chart.nodes\"</span>\r\n    <span class=\"code-attribute\">ng-mousedown</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">nodeMouseDown($event, node)\"</span>\r\n    <span class=\"code-attribute\">ng-attr-transform</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">translate({{node.x()}}, {{node.y()}})\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n\r\n    <span class=\"code-keyword\">&lt;!--</span><span class=\"code-keyword\"><span class=\"code-comment\"> ... node content ... </span>--&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">g</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n<p><em>ng-repeat</em> causes the <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g\">SVG g element</a> to be expanded out and repeated once for each node. The repetition is driven by the array of nodes supplied by the view-model: <em>chart.nodes</em>. At each repetition a variable <em>node</em> is defined that references the view-model for the node.</p>\r\n\r\n<p><a href=\"http://docs.angularjs.org/api/ng.directive:ngMousedown\"><em>ng-mousedown</em></a><em> </em>binds the mouse down event for nodes to the controller's <em>nodeMouseDown</em> which contains the logic to be invoked when the mouse is pressed on a node, the node itself is passed through as a parameter.</p>\r\n\r\n<p><em>ng-attr-transform </em>sets the <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform\">SVG transform</a> attribute to a translation that positions the node according to x, y coordinates from the view-model.</p>\r\n\r\n<p><em>ng-attr-&lt;attribute-name&gt;</em> is a new AngularJS feature that sets a given HTML or SVG attribute <em>after</em> evaluating an <a href=\"http://docs.angularjs.org/guide/expression\">AngularJS expression</a>.\r\nThis feature is so new that there doesn't appear to be any\r\ndocumentation for it yet, although you will find a mention of it\r\n(specifically related to SVG) in the <a href=\"http://docs.angularjs.org/guide/directive\">directive</a> documentation. I'll talk more about the need for <em>ng-attr- </em>in the section <a href=\"#Problems_with_SVG\">Problems with SVG</a>, meanwhile we will see it used throughout the template.</p>\r\n\r\n<p>The background of each node is an <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect\">SVG rect</a>:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">rect</span>\r\n    <span class=\"code-attribute\">ng-attr-class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{node.selected() &amp;&amp; 'selected-node-rect' || (node == mouseOverNode &amp;&amp; 'mouseover-node-rect' || 'node-rect')}}\"</span>\r\n    <span class=\"code-attribute\">ry</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">10\"</span>\r\n    <span class=\"code-attribute\">rx</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">10\"</span>\r\n    <span class=\"code-attribute\">x</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">0\"</span>\r\n    <span class=\"code-attribute\">y</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">0\"</span>\r\n    <span class=\"code-attribute\">ng-attr-width</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{node.width()}}\"</span>\r\n    <span class=\"code-attribute\">ng-attr-height</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{node.height()}}\"</span>\r\n    <span class=\"code-attribute\">fill</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">url(#nodeBackgroundGradient)\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">rect</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n\r\n<p><em>ng-attr-class </em>conditionally sets the <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/class\">SVG class</a>\r\ndepending on whether the node is selected, unselected or whether the\r\nmouse is hovered over the node. Other methods of setting SVG class (via jQuery/AngularJS), that normally work for <a href=\"http://www.w3schools.com/tags/att_global_class.asp\">HTML class</a>, don't work so well as I will describe <a href=\"#Problems_with_AngularJS\">later</a>.</p>\r\n\r\n<p><em>ng-attr-width</em> and <em>-height </em>set the <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/width\">width</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/height\">height</a> of the rect.</p>\r\n\r\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes\"><em>fill</em></a> sets the fill of the rect to <em>nodeBackgroundGradient </em>which was defined early in the <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs\"><em>defs</em></a> section of the SVG.</p>\r\n\r\n<p>Next an <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text\">SVG text</a>&nbsp;displays the node's name: </p>\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">text</span>\r\n    <span class=\"code-attribute\">ng-attr-x</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{node.width()/2}}\"</span>\r\n    <span class=\"code-attribute\">y</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">25\"</span>\r\n    <span class=\"code-attribute\">text-anchor</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">middle\"</span>\r\n    <span class=\"code-attribute\">alignment-baseline</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">middle\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n    {{node.name()}}\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">text</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n<p>The text is centered horizontally by\r\nanchoring it to the middle of the node. The example here of <em>ng-attr-x</em> really starts to show the power of <a href=\"http://docs.angularjs.org/guide/expression\">AngularJS expressions</a>.\r\nHere we are doing a computation within the expression to determine the\r\nhorizontal center point of the node, the result of the expression sets\r\nthe x coordinate of the text.</p>\r\n\r\n<p>After the text we see two separate sections that display the node's\r\ninput and output connectors. Before we look deeper into the visuals for\r\nconnectors let's have an overview of how the rendered node relates to\r\nits SVG template.</p>\r\n\r\n<p>The <em>ng-repeat</em>:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Node-template.png\"></p>\r\n\r\n\r\n<p>Node background and name:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Node-template-2.png\"></p>\r\n\r\n<h4><span>Representing connectors</span></h4>\r\n<p>Input and output connectors are roughly the same and so I will only discuss input connectors and point out the differences.</p>\r\n\r\n<p>Here again is a use of <em>ng-repeat</em> to generate multiple SVG elements:</p>\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">g</span>\r\n    <span class=\"code-attribute\">ng-repeat</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">connector in node.inputConnectors\"</span>\r\n    <span class=\"code-attribute\">ng-mousedown</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">connectorMouseDown($event, node, connector, $index, true)\"</span>\r\n    <span class=\"code-attribute\">class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">connector input-connector\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n\r\n    <span class=\"code-keyword\">&lt;!--</span><span class=\"code-keyword\"><span class=\"code-comment\"> ... connector content ... </span>--&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">g</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n\r\n<p>This looks very similar to the SVG for a node having an <em>ng-repeat </em>and a handler for <em>mouse down</em>. This time a static class is applied to the SVG g element that defines it as both a <em>connector</em> and an <em>input-connector</em>. If it were an output connector it would instead have the <em>output-connector</em> class applied.</p>\r\n\r\n<p>Each connector is made from two elements. The first is a text element to display the name:</p>\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">text</span>\r\n    <span class=\"code-attribute\">ng-attr-x</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{connector.x() + 20}}\"</span>\r\n    <span class=\"code-attribute\">ng-attr-y</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{connector.y()}}\"</span>\r\n    <span class=\"code-attribute\">text-anchor</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">left\"</span>\r\n    <span class=\"code-attribute\">alignment-baseline</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">middle\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n    {{connector.name()}}\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">text</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n<p>The only difference between the input and output connectors is the expression assigned to the <em>x coordinate</em>. An input connector is on the left of the node and so it is offset slightly to the <em>right</em>. An output connector is on the opposite side and therefore it is offset to the <em>left</em>.</p>\r\n\r\n<p>The second element is a <em>circle</em> shape that represents the <em>connection anchor point</em>, this is an <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle\">SVG circle</a> positioned at the connector's coordinates:</p>\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">circle</span>\r\n    <span class=\"code-attribute\">ng-attr-class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{connector == mouseOverConnector &amp;&amp; 'mouseover-connector-circle' || 'connector-circle'}}\"</span>\r\n    <span class=\"code-attribute\">ng-attr-r</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{connectorSize}}\"</span>\t\r\n    <span class=\"code-attribute\">ng-attr-cx</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{connector.x()}}\"</span>\r\n    <span class=\"code-attribute\">ng-attr-cy</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{connector.y()}}\"</span>\r\n    <span class=\"code-keyword\">/</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n<p><em>ng-attr-class</em> is used to conditionally set the class of the connector depending on whether the mouse is hovered over it. The other attributes set the position and size of the circle.</p>\r\n\r\n<p>The following diagram shows how the rendered connectors relate to the SVG template. First the <em>ng-repeat</em>:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Connector-template.png\"></p>\r\n\r\n<p>And the content of each connector:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Connector-template-2.png\"></p>\r\n\r\n\r\n\r\n\r\n\r\n<h4><span>Representing connections</span></h4>\r\n<p>Connections are composed of a curved <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path\">SVG path</a> with <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle\">SVG circles</a> attached at each end.\r\nMultiple connections are displayed using the now familiar <em>ng-repeat:</em></p>\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">g</span>\r\n    <span class=\"code-attribute\">ng-repeat</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">connection in chart.connections\"</span>\r\n    <span class=\"code-attribute\">class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">connection\"</span>\r\n    <span class=\"code-attribute\">ng-mousedown</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">connectionMouseDown($event, connection)\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n\r\n    <span class=\"code-keyword\">&lt;!--</span><span class=\"code-keyword\"><span class=\"code-comment\"> ... connection content ... </span>--&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">g</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n<p>The coordinates for the curved path are computed by the view-model:</p>\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">path</span>\r\n    <span class=\"code-attribute\">ng-attr-class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{connection.selected() &amp;&amp; 'selected-connection-line' || (connection == mouseOverConnection &amp;&amp; 'mouseover-connection-line' || 'connection-line')}}\"</span>\r\n    <span class=\"code-attribute\">ng-attr-d</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">M {{connection.sourceCoordX()}}, {{connection.sourceCoordY()}}\r\n    \t       C {{connection.sourceTangentX()}}, {{connection.sourceTangentY()}}\r\n           \t\t {{connection.destTangentX()}}, {{connection.destTangentY()}}\r\n                 {{connection.destCoordX()}}, {{connection.destCoordY()}}\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">path</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n<p>Each end of the connection is capped with a small filled circle.\r\nThe source and dest -ends look much the same, so let's look at the\r\nsource-end only:</p>\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">circle</span>\r\n    <span class=\"code-attribute\">ng-attr-class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{connection.selected() &amp;&amp; 'selected-connection-endpoint' || (connection == mouseOverConnection &amp;&amp; 'mouseover-connection-endpoint' || 'connection-endpoint')}}\"</span>\r\n    <span class=\"code-attribute\">r</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">5\"</span>\r\n    <span class=\"code-attribute\">ng-attr-cx</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{connection.sourceCoordX()}}\"</span>\r\n    <span class=\"code-attribute\">ng-attr-cy</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{connection.sourceCoordY()}}\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">circle</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n<p>Now some diagrams to understand the relationship between the rendered connections and the template.</p>\r\n\r\n<p>The <em>ng-repeat</em>:</p>\r\n\r\n<p><img  alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Connection-template.png\"></p>\r\n\r\n\r\n<p>The content of a connection:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Connection-template-2.png\"></p>\r\n\r\n<h3><span>UI Features</span></h3>\r\n<p>In this section I will cover the implementation of a\r\nnumber of UI features. The discussion will cross-cut through\r\napplication, directive, controller, view-model and template to examine\r\nthe workings of each feature.</p>\r\n\r\n<h4><span>Selection</span></h4>\r\n\r\n<p>Nodes and connections can be in either the <em>selected</em> or <em>unselected</em> state. A single left-click <em>selects </em>a node or connection. A click on the background <em>deselects all</em>.  Control + click enables <em>multiple selection</em>.</p>\r\n\r\n<p>Supporting selection is a major reason for individually wrapping the\r\ndata-models for nodes and connections in view-models. These view-models\r\nat their simplest have a <em>_selected</em> boolean field that\r\nstores the current selection state. This value must be stored in\r\nthe view-model and not in the data-model, to do otherwise would\r\nunnecessarily pollute the data-model and make it less reusable with\r\ndifferent types of views.</p>\r\n\r\n<p>The view-models for nodes and connections, <em>NodeViewModel</em> and <em>ConnectionViewModel</em>, both have a simple API for managing selection consisting of:</p>\r\n\r\n<ul><li style=\"font-style: italic;\">select()<span style=\"font-style: normal;\"> to select the node or connection;</span></li>\r\n<li style=\"font-style: italic;\">deselect()<span style=\"font-style: normal;\"> to deselect it;</span></li>\r\n<li style=\"font-style: italic;\">toggleSelected()<span style=\"font-style: normal;\"> to change selection based on current state; and</span></li>\r\n<li style=\"font-style: italic;\">selected()<span style=\"font-style: normal;\"> which returns </span>true<span style=\"font-style: normal;\"> when currently selected.</span></li></ul>\r\n\r\n\r\n<p><em>ChartViewModel</em> has a selection API for managing chart selection as a whole:</p>\r\n\r\n<ul><li style=\"font-style: italic;\">selectAll()<span style=\"font-style: normal;\"> selects all nodes and connections in the chart;</span></li>\r\n<li style=\"font-style: italic;\">deselectAll() <span style=\"font-style: normal;\">deselects everything;</span></li>\r\n<li style=\"font-style: italic;\">updateSelectedNodesLocation(...) <span style=\"font-style: normal;\">offsets selected nodes by the specified delta;</span></li>\r\n<li style=\"font-style: italic;\">deleteSelected()<span style=\"font-style: normal;\"> deletes everything that is selected;</span></li>\r\n<li style=\"font-style: italic;\">applySelectionRect(...)<span style=\"font-style: normal;\"> selects everything that is contained within the specified rect; and</span></li>\r\n<li style=\"font-style: italic;\">getSelectedNodes()<span style=\"font-style: normal;\"> retrieves the list of nodes that are selected.</span></li></ul>\r\n\r\n\r\n<p>The visuals for nodes and connections are modified dynamically according to their <em>selection</em> state. <em>ng-attr-class </em>completely switches classes depending on the result of a call to <em>selected()</em>, for example, setting the class of a node:</p>\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">rect</span>\r\n    <span class=\"code-attribute\">ng-attr-class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{node.selected() &amp;&amp; 'selected-node-rect' || (node == mouseOverNode &amp;&amp; 'mouseover-node-rect' || 'node-rect')}}\"</span>\r\n    <span class=\"code-attribute\">...</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">rect</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n<p>Of course the expression is more complicated because we are also setting the class based on the <em>mouse-over</em> state. If you are new to Javacript I should note that <a href=\"http://www.grauw.nl/blog/entry/510\">the kind of expression</a> used above acts like the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">ternary operator</a>.</p>\r\n\r\n<p>When <em>node.selected()</em> returns <em>true</em> the class of the SVG rect is set to <em>selected-node-rect</em>, \r\na class defined in <em>app.css</em>, and modifies the node's visual to indicate that it is selected.</p>\r\n\r\n<p>The same technique is also used to conditionally set the class of connections.</p>\r\n\r\n<p><img  alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Selected-node.png\"></p>\r\n\r\n\r\n<h4><span>Drag Selection</span></h4>\r\n<p>Nodes and connections can also be selected by dragging out a selection rectangle to contain the items \r\nto be selected:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Drag_selection.png\"></p>\r\n<p>Drag selection is handled at multiple levels:</p>\r\n\r\n<ul>\r\n<li>The template binds mouse event handlers to the DOM;</li>\r\n<li>The controller provides the event handlers and coordinates the dragging; and </li>\r\n<li>The view-model determines which  nodes to select and then selects them.</li>\r\n</ul>\r\n\r\n<p>Ultimately, the final action during drag selection, is to select nodes and connections that are contained within the <em>drag selection rect</em>. The coordinates and size of the rect are passed to <em>applySelectionRect</em>. This function applies the selection in the following steps:</p>\r\n\r\n<ul>\r\n<li>Everything that is initially selected is deselected.</li>\r\n<li>Nodes are tested against the selection rect and those that are contained within it are selected.</li>\r\n<li>Connections are selected when they are attached to nodes selected in the previous pass.</li>\r\n</ul>\r\n\r\n\r\n\r\n<p>The flowchart controller receives mouse events and coordinates the dragging operation.  <em>Mouse down</em> is the event we are interested in here which is handled by <em>mouseDown</em> in the controller:</p>\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">svg</span>\r\n    <span class=\"code-attribute\">class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">draggable-container\"</span>\r\n    <span class=\"code-attribute\">xmlns</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">http://www.w3.org/2000/svg\"</span>\r\n    <span class=\"code-attribute\">ng-mousedown</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">mouseDown($event)\"</span>\r\n    <span class=\"code-attribute\">ng-mousemove</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">mouseMove($event)\"</span> \r\n    <span class=\"code-keyword\">&gt;</span>\r\n\r\n    <span class=\"code-keyword\">&lt;!--</span><span class=\"code-keyword\"><span class=\"code-comment\"> ... </span>--&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">svg</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n<p>Looking into <em>mouseDown</em> we see the first use of the <em><a href=\"#Dragging_Service\">dragging service</a>. </em>This\r\nis a custom service I have created to help manage dragging operations\r\nin AngularJS. Over the next few sections we'll see multiple examples of\r\nit and later we'll look at the implementation. The\r\ndragging service is dependency injected as the <em>dragging</em> parameter to the controller and this allows us to use the service anywhere within the controller.</p>\r\n\r\n<p>The first thing to note about <em>mouseDown</em> is that it is attached to <em>$scope </em>and this makes it available for binding in the HTML:</p>\r\n\r\n\r\n\r\n<pre>$scope.mouseDown = function (evt) {\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>};</pre>\r\n\r\n\r\n<p><em>mouseDown</em>'s first task is to ensure nothing is selected. This means that any <em>mouse down</em>\r\nin the flowchart deselects everything. This is exactly the behavior\r\nwe want when clicking in the background of the flowchart:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>$scope.mouseDown = function (evt) {\r\n    $scope.chart.deselectAll();\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>};</pre>\r\n\r\n<p>After deselecting all,&nbsp;<em>startDrag</em> is called on the <em>dragging </em>service to commence the dragging operation:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>$scope.mouseDown = function (evt) {\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... deselect all ...\r\n</span>\r\n    dragging.startDrag(evt, {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>    });\r\n};</pre>\r\n\r\n\r\n<p>The dragging operation will continue until a <em>mouse up </em>is detected, in this case a <em>mouse up</em> on the root SVG element.  Note though that we don't handle <em>mouse up</em> explicitly, it is handled automatically by the <em>dragging service </em>and it is the <em>draggable-container</em> class on the SVG element which identifies it as the element within which dragging will be contained.</p>\r\n\r\n<p>Multiple event handlers (or callbacks) are passed as parameters and are invoked at key points in the dragging operation:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>dragging.startDrag(evt, {\r\n\r\n    dragStarted: function (x, y) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>    },\r\n\r\n    dragging: function (x, y) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>    },\r\n\r\n    dragEnded: function () {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>    },\r\n});</pre>\r\n\r\n\r\n<ul><li><span style=\"font-style: italic;\">d</span><em style=\"font-style: italic;\">ragStarted</em><span style=\"font-style: italic;\"> </span>is called when dragging has commenced;</li>\r\n<li style=\"font-style: italic;\">dragging<span style=\"font-style: normal;\"> is called repeatedly during dragging; and finally </span></li>\r\n<li style=\"font-style: italic;\">dragEnded<span style=\"font-style: normal;\"> is called when dragging has been ended by the user.</span></li></ul>\r\n\r\n\r\n<p><em>dragStarted</em> sets up&nbsp;scope variables that track the state of the dragging operation:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>dragging.startDrag(evt, {\r\n    dragStarted: function (x, y) {\r\n        $scope.dragSelecting = <span class=\"code-keyword\">true</span>;\r\n        var startPoint = controller.translateCoordinates(x, y);\r\n        $scope.dragSelectionStartPoint = startPoint;\r\n        $scope.dragSelectionRect = {\r\n            x: startPoint.x,\r\n            y: startPoint.y,\r\n            width: <span class=\"code-digit\">0</span>,\r\n            height: <span class=\"code-digit\">0</span>,\r\n        };\r\n    },\r\n\r\n    dragging: <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>\r\n    dragEnded: <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>});</pre>\r\n\r\n\r\n\r\n<p><em>dragSelectionRect </em>tracks the coordinates and size of the\r\nselection rectangle and is needed to visually display the selection rect.</p>\r\n\r\n<p><em>dragging</em>&nbsp;is invoked on each mouse movement during the dragging operation. It continuously updates <em>dragSelectionRect </em>as the rect is dragged by the user:</p>\r\n\r\n<pre>dragging.startDrag(evt, {\r\n    dragStarted: <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>\r\n    dragging: function (deltaX, deltaY, x, y) {\r\n        var startPoint = $scope.dragSelectionStartPoint;\r\n        var curPoint = controller.translateCoordinates(x, y);\r\n        $scope.dragSelectionRect = {\r\n            x: curPoint.x &gt; startPoint.x ? startPoint.x : curPoint.x,\r\n            y: curPoint.y &gt; startPoint.y ? startPoint.y : curPoint.y,\r\n            width: curPoint.x &gt; startPoint.x ? x - startPoint.x : startPoint.x - x,\r\n            height: curPoint.y &gt; startPoint.y ? y - startPoint.y : startPoint.y - y,\r\n        };\r\n    },\r\n\r\n    dragEnded: <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>});</pre>\r\n\r\n\r\n<p>Eventually the drag operation completes and&nbsp;<em>dragEnded</em> is invoked. This calls into the view-model to apply the selection rect and then <a href=\"http://perfectionkills.com/understanding-delete/\">deletes</a> the scope variables that were used to track the selection rectangle:</p>\r\n\r\n<pre>dragging.startDrag(evt, {\r\n    dragStarted: <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>\r\n    dragging: <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>\r\n    dragEnded: function () {\r\n        $scope.dragSelecting = <span class=\"code-keyword\">false</span>;\r\n        $scope.chart.applySelectionRect($scope.dragSelectionRect);\r\n        <span class=\"code-keyword\">delete</span> $scope.dragSelectionStartPoint;\r\n        <span class=\"code-keyword\">delete</span> $scope.dragSelectionRect;\r\n    },\r\n});</pre>\r\n\r\n\r\n<p>The selection rect itself is displayed as a simple <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect\">SVG rect</a>:</p>\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">rect</span>\r\n    <span class=\"code-attribute\">ng-if</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">dragSelecting\"</span>\r\n    <span class=\"code-attribute\">class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">drag-selection-rect\"</span>\r\n    <span class=\"code-attribute\">ng-attr-x</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{dragSelectionRect.x}}\"</span>\r\n    <span class=\"code-attribute\">ng-attr-y</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{dragSelectionRect.y}}\"</span>\r\n    <span class=\"code-attribute\">ng-attr-width</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{dragSelectionRect.width}}\"</span>\r\n    <span class=\"code-attribute\">ng-attr-height</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{dragSelectionRect.height}}\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">rect</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n<p>The rect only needs to be shown when the user is actually dragging, so it is conditionally enabled using an <a href=\"http://docs.angularjs.org/api/ng.directive:ngIf\"><em>ng-if</em></a> that is bound to the <em>dragSelecting</em> variable. If you look back at&nbsp;<em>dragStarted</em> and <em>dragEnded </em>you will see that this variable is set to <em>true</em> during the dragging operation.</p>\r\n\r\n\r\n\r\n<p>The rect is positioned by the <em>ng-attr-</em> atttributes that set its coordinates and size:</p>\r\n\r\n<p><img  alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Selection-rect.png\"></p>\r\n\r\n\r\n<h4>Node Dragging</h4>\r\n\r\n<p>\r\nNodes can be dragged by clicking anywhere on a node and dragging. Multiple selected nodes can be dragged at the same time.\r\n</p>\r\n\r\n<p><em>Mouse down</em> is handled for nodes and calls <em>nodeMouseDown</em>:</p>\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">g</span>\r\n    <span class=\"code-attribute\">ng-repeat</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">node in chart.nodes\"</span>\r\n    <span class=\"code-attribute\">ng-mousedown</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">nodeMouseDown($event, node)\"</span>\r\n    <span class=\"code-attribute\">ng-attr-transform</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">translate({{node.x()}}, {{node.y()}})\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n\r\n    <span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">!</span> <span class=\"code-attribute\">--</span> <span class=\"code-attribute\">...</span> <span class=\"code-attribute\">--</span><span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">g</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n<p><em>nodeMouseDown</em> uses the <em>dragging service</em> to coordinate the dragging of nodes:</p>\r\n\r\n<pre>$scope.nodeMouseDown = function (evt, node) {\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>\r\n    dragging.startDrag(evt, {\r\n        dragStarted: <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>\r\n        dragging: <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>\r\n        clicked: <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>    });\r\n};</pre>\r\n\r\n<p>As we have already seen, a number of event handlers (or callbacks) are passed&nbsp;to s<em>tartDrag</em> which are invoked&nbsp;during the dragging operation. </p>\r\n\r\n<p><em>dragStarted</em> is invoked when dragging commences.</p>\r\n\r\n<pre>dragStarted: function (x, y) {\r\n\r\n    lastMouseCoords = controller.translateCoordinates(x, y);\r\n\r\n    <span class=\"code-keyword\">if</span> (!node.selected()) {\r\n        chart.deselectAll();\r\n        node.select();\r\n    }\r\n},</pre>    \r\n\r\n<p>When dragging a selected node <em>all selected</em>\r\nnodes are also dragged and the selection is not changed. However when\r\ndragging a node that is not already selected, only that node is\r\nselected and dragged.</p>\r\n\r\n<p><em>dragging</em> is invoked repeatedly during the dragging operation. It computes <em>delta mouse coordinates</em> and calls into the view-model to update the positions of the selected nodes.</p>\r\n\r\n<pre>dragging: function (x, y) {\r\n\r\n    var curCoords = controller.translateCoordinates(x, y);\r\n    var deltaX = curCoords.x - lastMouseCoords.x;\r\n    var deltaY = curCoords.y - lastMouseCoords.y;\r\n\r\n    chart.updateSelectedNodesLocation(deltaX, deltaY);\r\n\r\n    lastMouseCoords = curCoords;\r\n},</pre>\r\n\r\n<p><em>updateSelectedNodesLocation </em>is the view-model function that\r\nupdates the positions of the nodes being dragged. It is trivial, simply\r\nenumerating selected nodes and directly updating their coordinates:</p>\r\n\r\n<pre><span class=\"code-keyword\">this</span>.updateSelectedNodesLocation = function (deltaX, deltaY) {\r\n\r\n    var selectedNodes = <span class=\"code-keyword\">this</span>.getSelectedNodes();\r\n    <span class=\"code-keyword\">for</span> (var i = <span class=\"code-digit\">0</span>; i &lt; selectedNodes.length; ++i) {\r\n        var node = selectedNodes[i];\r\n        node.data.x += deltaX;\r\n        node.data.y += deltaY;\r\n    }\r\n};</pre>\r\n\r\n<p>There is no need to handle <em>dragEnded</em> in this circumstance, so it is omitted and ignored by the <em>dragging service</em>.\r\n\r\n<p>The <em>clicked</em> callback is new, it is invoked when the <em>mouse down </em>results in a click rather than a drag operation. In this case we delegate to the view-model:</p>\r\n\r\n<pre>clicked: function () {\r\n    chart.handleNodeClicked(node, evt.ctrlKey);\r\n},</pre>\r\n\r\n<p>\r\n<em>handleNodeClicked</em> either toggles the selection (when control is pressed) or deselects all and then only selects the clicked node:\r\n</p>\r\n\r\n<pre><span class=\"code-keyword\">this</span>.handleNodeClicked = function (node, ctrlKey) {\r\n\r\n    <span class=\"code-keyword\">if</span> (ctrlKey) {\r\n        node.toggleSelected();\r\n    }\r\n    <span class=\"code-keyword\">else</span> {\r\n        <span class=\"code-keyword\">this</span>.deselectAll();\r\n        node.select();\r\n    }\r\n\r\n    var nodeIndex = <span class=\"code-keyword\">this</span>.nodes.indexOf(node);\r\n    <span class=\"code-keyword\">if</span> (nodeIndex == -<span class=\"code-digit\">1</span>) {\r\n        <span class=\"code-keyword\">throw</span> <span class=\"code-keyword\">new</span> Error(<span class=\"code-string\">\"</span><span class=\"code-string\">Failed to find node in view model!\"</span>);\r\n    }\r\n    <span class=\"code-keyword\">this</span>.nodes.splice(nodeIndex, <span class=\"code-digit\">1</span>);\r\n    <span class=\"code-keyword\">this</span>.nodes.push(node);          \r\n};</pre>\r\n\r\n<p>Notice the code at the end, it changes the order of nodes after each click. The node that was clicked is moved to the \r\nend of the list. As the list of nodes drives an <em>ng-repeat</em>, as seen earlier, it actually controls the render order\r\nof the nodes. This is usually known as <a href=\"http://en.wikipedia.org/wiki/Z-order\">Z order</a>. This means that clicked nodes are always <em>bought to the front</em>.</p>\r\n\r\n<h4><span>Adding Nodes and Connectors</span></h4>\r\n\r\n\r\n<p>The UI for adding nodes to the flowchart is simple enough, I didn't spend much time on it. It is simply a button  \r\n    in <em>index.html</em>:</p>\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">button</span>\r\n    <span class=\"code-attribute\">ng-click</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">addNewNode()\"</span>\r\n    <span class=\"code-attribute\">title</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">Add a new node to the chart\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n    Add Node\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">button</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n<p>The <a href=\"http://docs.angularjs.org/api/ng.directive:ngClick\">ng-click</a> binds the <em>click event</em> to the \r\n    <em>addNewNode</em> function. Clicking the button calls this function that is defined in <em>app.js</em>:</p>\r\n\r\n\r\n<pre>$scope.addNewNode = function () {\r\n    var nodeName = prompt(<span class=\"code-string\">\"</span><span class=\"code-string\">Enter a node name:\"</span>, <span class=\"code-string\">\"</span><span class=\"code-string\">New node\"</span>);\r\n\r\n    <span class=\"code-keyword\">if</span> (!nodeName) {\r\n        <span class=\"code-keyword\">return</span>;\r\n    }\r\n\r\n    var newNodeDataModel = {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... define node data-model ...\r\n</span>    };\r\n\r\n    $scope.chartViewModel.addNode(newNodeDataModel);\r\n};</pre>\r\n\r\n<p>The function first prompts the user to enter a name for the new node. This makes use of the <em>prompt</em> <a href=\"http://docs.angularjs.org/guide/dev_guide.services.creating_services\">service</a> which is defined in the same file and is an abstraction over the browser's <a href=\"http://www.w3schools.com/jsref/met_win_prompt.asp\">prompt</a>\r\nfunction. Next the data-model for the new node is setup, this is pretty\r\nmuch the same as the chart's initial data-model. Finally <em>addNode</em> is called to inject the new node into the chart's view-model.</p>\r\n\r\n<p>Adding connectors is very similar to adding nodes. There are buttons\r\nfor adding either an input or output connector. A&nbsp;function is\r\ncalled on button click, the user enters a name and a data-model is created before adding the connector\r\nto each selected node.</p>\r\n\r\n\r\n<h4><span>Deleting Nodes and Connections</span></h4>\r\n\r\n\r\n<p>Nodes and connections are deleted through the same mechanism. You\r\nselect or multi-select what you want to delete then press the <span style=\"font-style: italic;\">delete\r\nkey</span> or click the <em>Delete Selected</em> button. Clicking the button calls the deleteSelected function, which in turn calls through to the view-model:</p>\r\n\r\n\r\n\r\n\r\n<pre>$scope.deleteSelected = function () {\r\n    $scope.chartViewModel.deleteSelected();\r\n};</pre>\r\n\r\n\r\n<p>The delete key is handled for the <em>body</em> of the page using <a href=\"http://docs.angularjs.org/api/ng.directive:ngKeyup\">ng-keyup</a>:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">body</span> \r\n    <span class=\"code-attribute\">...</span>\r\n    <span class=\"code-attribute\">ng-keyup</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">keyUp($event)\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n\r\n    <span class=\"code-keyword\">&lt;!--</span><span class=\"code-keyword\"><span class=\"code-comment\"> ... </span>--&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">body</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n<p><em>keyUp</em> is called whenever a key is pressed, it checks the keycode for the delete key and it calls through to the view-model:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>$scope.keyUp = function (evt) {\r\n    <span class=\"code-keyword\">if</span> (evt.keyCode === deleteKeyCode) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>        <span class=\"code-comment\">//</span><span class=\"code-comment\"> Delete key.\r\n</span>        <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>        $scope.chartViewModel.deleteSelected();\r\n    }\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ....\r\n</span>};</pre>\r\n\r\n\r\n\r\n\r\n<p>This method of key event handling seems a bit ugly to me. I'm aware\r\nthat AngularJS plugins exist to bind hotkeys directly to scope\r\nfunctions, but I didn't want to include any extra dependencies in this\r\nproject. If anyone knows a cleaner way of setting this up in AngularJS\r\nplease let me know and I'll update the article!</p>\r\n\r\n<p>When the view-model's <em>deleteSelected</em> is called it follows a\r\nfew simple rules to determine which nodes and connectors to delete and\r\nwhich ones to keep, as illustrated in the following diagram:</p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Selected_items_to_be_deleted.png\"></p>\r\n\r\n\r\n<p><em>deleteSelected</em> has three main parts:</p>\r\n\r\n<ol><li>Enumerate nodes and remove any that are selected.</li>\r\n<li>Enumerate connections and remove any that are selected or any for which an attached node has already been removed.</li>\r\n<li>Update the view- and data-model to contain only the nodes and connections to be kept.</li></ol>\r\n\r\n\r\n<p>The first part:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">this</span>.deleteSelected = function () {\r\n    var newNodeViewModels = [];\r\n    var newNodeDataModels = [];\r\n    var deletedNodeIds = [];\r\n\r\n    <span class=\"code-keyword\">for</span> (var nodeIndex = <span class=\"code-digit\">0</span>; nodeIndex &lt; <span class=\"code-keyword\">this</span>.nodes.length; ++nodeIndex) {\r\n        var node = <span class=\"code-keyword\">this</span>.nodes[nodeIndex];\r\n\r\n        <span class=\"code-keyword\">if</span> (!node.selected()) {\r\n            <span class=\"code-comment\">//</span><span class=\"code-comment\"> Only retain non-selected nodes.\r\n</span>            newNodeViewModels.push(node);\r\n            newNodeDataModels.push(node.data);\r\n        }\r\n        <span class=\"code-keyword\">else</span> {\r\n            <span class=\"code-comment\">//</span><span class=\"code-comment\"> Keep track of nodes that were deleted, so their connections can also\r\n</span>            <span class=\"code-comment\">//</span><span class=\"code-comment\"> be deleted.\r\n</span>            deletedNodeIds.push(node.data.id);\r\n        }\r\n    }\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>};</pre>\r\n\r\n<p>This code builds a new list that contains the nodes to be kept.\r\nNodes that are not selected are added to this list. A separate list is\r\nbuilt that contains the ids of nodes to be deleted. We hang onto the ids of deleted nodes in order to check\r\nwhich connections are now defunct because an attached node has been\r\ndeleted.</p>\r\n\r\n\r\n<p>And the second part:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">this</span>.deleteSelected = function () {\r\n    var newNodeViewModels = [];\r\n    var newNodeDataModels = [];\r\n    var deletedNodeIds = [];\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... delete nodes ...\r\n</span>\r\n    var newConnectionViewModels = [];\r\n    var newConnectionDataModels = [];\r\n\r\n    <span class=\"code-keyword\">for</span> (var connectionIndex = <span class=\"code-digit\">0</span>; connectionIndex &lt; <span class=\"code-keyword\">this</span>.connections.length; ++connectionIndex) {\r\n        var connection = <span class=\"code-keyword\">this</span>.connections[connectionIndex];\t\t\t\t\r\n\r\n        <span class=\"code-keyword\">if</span> (!connection.selected() &amp;&amp;\r\n            deletedNodeIds.indexOf(connection.data.source.nodeID) === -<span class=\"code-digit\">1</span> &amp;&amp;\r\n            deletedNodeIds.indexOf(connection.data.dest.nodeID) === -<span class=\"code-digit\">1</span>)\t{\t\r\n            <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>            <span class=\"code-comment\">//</span><span class=\"code-comment\"> The nodes this connection is attached to, where not deleted,\r\n</span>            <span class=\"code-comment\">//</span><span class=\"code-comment\"> so keep the connection.\t\r\n</span>            <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>            newConnectionViewModels.push(connection);\r\n            newConnectionDataModels.push(connection.data);\r\n        }\r\n    }\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>};</pre>\r\n\r\n<p>The code for deleting connections is similar to that for deleting\r\nnodes. Again we build a list of connections to be kept. In this case we\r\nare deleting connections not only when they are selected, but also when\r\nthe attached node was just deleted.</p>\r\n\r\n\r\n<p>The third part is the simplest, it updates the view-model and the data-model from the lists that were just built:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">this</span>.deleteSelected = function () {\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... delete nodes ...\r\n</span>\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... delete connections ...\r\n</span>\r\n    <span class=\"code-keyword\">this</span>.nodes = newNodeViewModels;\r\n    <span class=\"code-keyword\">this</span>.data.nodes = newNodeDataModels;\r\n    <span class=\"code-keyword\">this</span>.connections = newConnectionViewModels;\r\n    <span class=\"code-keyword\">this</span>.data.connections = newConnectionDataModels;\r\n};</pre>\r\n\r\n\r\n\r\n\r\n<h4><span>Mouse Over and SVG Hit Testing</span></h4>\r\n<p>I have implemented <em>mouse over</em> support so that items in the\r\nflowchart can be highlighted when the mouse is hovered over them. It is\r\ninteresting to look at this in more detail as I was unable to achieve\r\nit using AngularJS's event handling (eg <a href=\"http://docs.angularjs.org/api/ng.directive:ngMouseenter\">ng-mouseenter</a> and <a href=\"http://docs.angularjs.org/api/ng.directive:ngMouseleave\">ng-mouseleave</a>).  Instead I had to implement SVG <a href=\"http://en.wikipedia.org/wiki/Hit-testing\">hit-test</a> manually in order to determine the element that is under the mouse cursor.</p>\r\n\r\n<p>The mouse-over feature isn't just cosmetic, it is necessary for\r\nconnection dragging to know which connector a new connection is being\r\ndropped on.</p>\r\n\r\n<p>The root SVG element binds <a href=\"http://docs.angularjs.org/api/ng.directive:ngMousemove\"><em>ng-mousemove</em></a>\r\n    to the <em>mouseMove</em> function: </p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">svg</span>\r\n    <span class=\"code-attribute\">...</span>\r\n    <span class=\"code-attribute\">ng-mousemove</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">mouseMove($event)\"</span> \r\n    <span class=\"code-keyword\">&gt;</span>\r\n\r\n    <span class=\"code-keyword\">&lt;!--</span><span class=\"code-keyword\"><span class=\"code-comment\"> ... </span>--&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">svg</span><span class=\"code-keyword\">&gt;</span> </pre>\r\n\r\n\r\n\r\n\r\n<p>This enables mouse movement tracking for the entire SVG canvas.</p>\r\n\r\n<p><em>mouseMove </em>first clears the <em>mouse over</em> elements that might have been cached in the previous invocation:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>$scope.mouseMove = function (evt) {\r\n\r\n    $scope.mouseOverConnection = null;\r\n    $scope.mouseOverConnector = null;\r\n    $scope.mouseOverNode = null;\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>};</pre>\r\n\r\n<p>Next is the actual hit-test:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>$scope.mouseMove = function (evt) {\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... clear cached elements ...\r\n</span>\r\n    var mouseOverElement = controller.hitTest(evt.clientX, evt.clientY);\r\n    <span class=\"code-keyword\">if</span> (mouseOverElement == null) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> Mouse isn't over anything, just clear all.\r\n</span>        <span class=\"code-keyword\">return</span>;\r\n    }\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>};</pre>\r\n\r\n<p>Hit-testing is invoked after each mouse movement to determine the SVG element currently under the mouse cursor. When no\r\nSVG element is under the mouse, because nothing was hit, <em>mouseMove</em> returns straight away because it has nothing more to do. When this happens the\r\ncached elements have already been cleared so the current state of the\r\ncontroller records that <em>nothing was hit</em>.</p>\r\n\r\n<p>Next, various checks are made to determine what kind of element was\r\nclicked, so that the element (if it turns out to be a connection,\r\nconnector or node) can be cached in the appropriate variable. Checking for <em>connection mouse over </em>is&nbsp;necessary only when <span style=\"font-style: italic;\">connection dragging </span>is not currently in progress. Therefore&nbsp;connection hit-testing must be conditionally enabled:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>$scope.mouseMove = function (evt) {\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>\r\n    <span class=\"code-keyword\">if</span> (!$scope.draggingConnection) { <span class=\"code-comment\">//</span><span class=\"code-comment\"> Only allow 'connection mouse over' when not dragging out a connection.\r\n</span>\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> Figure out if the mouse is over a connection.\r\n</span>        var scope = controller.checkForHit(mouseOverElement, controller.connectionClass);\r\n        $scope.mouseOverConnection = (scope &amp;&amp; scope.connection) ? scope.connection : null;\r\n\r\n        <span class=\"code-keyword\">if</span> ($scope.mouseOverConnection) {\r\n            <span class=\"code-comment\">//</span><span class=\"code-comment\"> Don't attempt to mouse over anything else.\r\n</span>            <span class=\"code-keyword\">return</span>;\r\n        }\r\n    }\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>};</pre>\r\n\r\n\r\n<p>After connection hit-testing is connector hit-testing, followed by node hit-testing:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>$scope.mouseMove = function (evt) {\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> Figure out if the mouse is over a connector.\r\n</span>    var scope = controller.checkForHit(mouseOverElement, controller.connectorClass);\r\n    $scope.mouseOverConnector = (scope &amp;&amp; scope.connector) ? scope.connector : null;\r\n    <span class=\"code-keyword\">if</span> ($scope.mouseOverConnector) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> Don't attempt to mouse over anything else.\r\n</span>        <span class=\"code-keyword\">return</span>;   \r\n    }\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> Figure out if the mouse is over a node.\r\n</span>    var scope = controller.checkForHit(mouseOverElement, controller.nodeClass);    \r\n    $scope.mouseOverNode = (scope &amp;&amp; scope.node) ? scope.node : null;\t\t\r\n};</pre>\r\n\r\n\r\n<p>The <em>mouse over </em>element is cached in one of three variables: <em>mouseOverConnection</em>, <em>mouseOverConnector</em> or <em>mouseOverNode</em>. Each of these are scope variables and referenced from the SVG to conditionally enable a special class on <em>mouse over</em> to make the connection, connector or node look different when the mouse is hovered over it.</p>\r\n\r\n<p><span style=\"font-style: italic;\">ng-attr-class</span> conditionally sets the class of the SVG\r\nelement depending on the mouse-over state (and also the selection-state):</p>\r\n\r\n<pre>ng-attr-class=<span class=\"code-string\">\"</span><span class=\"code-string\">{{connection.selected() &amp;&amp; 'selected-connection-line' || (connection == mouseOverConnection &amp;&amp; 'mouseover-connection-line' || 'connection-line')}}\"</span></pre>\r\n\r\n<p>This convoluted expression sets the class to <em>selected-</em><span style=\"font-style: italic;\">connection</span><em>-line</em> when the connection is selected, to <em>mouseover-connection-line </em>when the mouse is hovered over it or to <em>connection-line </em>when neither of these conditions is <em>true</em>.</p>\r\n\r\n<p><em>mouseMove</em>&nbsp;relies on the functions <em>hitTest</em> and <em>checkForHit</em> to do its dirty work.  <em>hitTest </em>simply calls <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.elementFromPoint\"><em>elementFromPoint</em></a> to determine the element under the specified coordinates:</p>\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">this</span>.hitTest = function (clientX, clientY) {\r\n    <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">this</span>.document.elementFromPoint(clientX, clientY);\r\n};</pre>\r\n\r\n\r\n<p><em>checkForHit </em>invokes <em>searchUp</em> which recursively searches up the DOM for the element that has one of the following classes: <em>connection</em>, <em>connector</em> or <em>node</em>. In this way we can find the SVG element that relates most directly to the flowchart component we are hit-testing against.</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">this</span>.searchUp = function (element, parentClass) {\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>    <span class=\"code-comment\">//</span><span class=\"code-comment\"> Reached the root.\r\n</span>    <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>    <span class=\"code-keyword\">if</span> (element == null || element.length == <span class=\"code-digit\">0</span>) {\r\n        <span class=\"code-keyword\">return</span> null;\r\n    }\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> \r\n</span>    <span class=\"code-comment\">//</span><span class=\"code-comment\"> Check if the element has the class that identifies it as a connector.\r\n</span>    <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>    <span class=\"code-keyword\">if</span> (hasClassSVG(element, parentClass)) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\">\t\r\n</span>        <span class=\"code-comment\">//</span><span class=\"code-comment\"> Found the connector element.\r\n</span>        <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>        <span class=\"code-keyword\">return</span> element;\r\n    }\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>    <span class=\"code-comment\">//</span><span class=\"code-comment\"> Recursively search parent elements.\r\n</span>    <span class=\"code-comment\">//</span><span class=\"code-comment\">\r\n</span>    <span class=\"code-keyword\">return</span> <span class=\"code-keyword\">this</span>.searchUp(element.parent(), parentClass);\r\n};</pre>\r\n\r\n<p><em>searchUp </em>relies on the custom function <em>hasClassSVG</em> to check\r\nthe class of the element. jQuery would normally be used to check the\r\nclass of a HTML element, but unfortunately it doesn't work correctly\r\nfor SVG elements. I discuss this more in <a href=\"#Problems_With_SVG\">Problems with SVG</a>.\r\n\r\n<p>Both <em>hitTest </em>and <em>checkForHit</em> are implemented as separate functions so they are easily replaced with mocks in the unit-tests.</p>\r\n\r\n<h4><span>Connection Dragging</span></h4>\r\n\r\n\r\n<p>Connections are created by dragging out a connector, creating a\r\nconnection that can be dragged about by the user. Creation of the new connection is completed when its end-point has\r\nbeen dragged over to another connector and it is committed to the view-model. When a connection is being dragged it is represented by an SVG\r\nvisual that is separate to the other connections in the flowchart.</p>\r\n\r\n<p><a href=\"http://docs.angularjs.org/api/ng.directive:ngIf\"><em>ng-if</em></a> conditionally displays the visual when \r\n    <em>draggingConnection</em> is set to <em>true</em>:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">g</span>\r\n    <span class=\"code-attribute\">ng-if</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">draggingConnection\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n    <span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">path</span>\r\n        <span class=\"code-attribute\">class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">dragging-connection dragging-connection-line\"</span>\r\n        <span class=\"code-attribute\">ng-attr-d</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">M {{dragPoint1.x}}, {{dragPoint1.y}}\r\n                   C {{dragTangent1.x}}, {{dragTangent1.y}}\t\r\n                     {{dragTangent2.x}}, {{dragTangent2.y}}\r\n                     {{dragPoint2.x}}, {{dragPoint2.y}}\"</span>\r\n        <span class=\"code-keyword\">&gt;</span>\r\n    <span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">path</span><span class=\"code-keyword\">&gt;</span>\r\n\r\n    <span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">circle</span>\r\n        <span class=\"code-attribute\">class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">dragging-connection dragging-connection-endpoint\"</span>\r\n        <span class=\"code-attribute\">r</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">4\"</span>\r\n        <span class=\"code-attribute\">ng-attr-cx</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{dragPoint1.x}}\"</span> \r\n        <span class=\"code-attribute\">ng-attr-cy</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{dragPoint1.y}}\"</span> \r\n        <span class=\"code-keyword\">&gt;</span>\r\n    <span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">circle</span><span class=\"code-keyword\">&gt;</span>\r\n\r\n    <span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">circle</span>\r\n        <span class=\"code-attribute\">class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">dragging-connection dragging-connection-endpoint\"</span>\r\n        <span class=\"code-attribute\">r</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">4\"</span> \r\n        <span class=\"code-attribute\">ng-attr-cx</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{dragPoint2.x}}\"</span> \r\n        <span class=\"code-attribute\">ng-attr-cy</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">{{dragPoint2.y}}\"</span> \t\r\n        <span class=\"code-keyword\">&gt;</span>\r\n    <span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">circle</span><span class=\"code-keyword\">&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">g</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n<p>The end-points and curve of the connection are defined by the following variables: <em>dragPoint1, dragPoint2, dragTangent1 </em>and <em>dragTangent2.</em></p>\r\n\r\n<p>Connection dragging is initiated by a <em>mouse down</em> on a <em>connector</em>. The mouse down event is bound to <em>connectorMouseDown</em>:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">g</span>\r\n    <span class=\"code-attribute\">ng-repeat</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">connector in node.outputConnectors\"</span>\r\n    <span class=\"code-attribute\">ng-mousedown</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">connectorMouseDown($event, node, connector, $index, false)\"</span>\r\n    <span class=\"code-attribute\">class</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">connector output-connector\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n\r\n    <span class=\"code-keyword\">&lt;!--</span><span class=\"code-keyword\"><span class=\"code-comment\"> ... connector ... </span>--&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">g</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n<p><em>connectorMouseDown</em> uses the <em>dragging service</em> to manage the dragging operation, something we now seen multiple times:</p>\r\n\r\n<pre>$scope.connectorMouseDown = function (evt, node, connector, connectorIndex, isInputConnector) {\r\n\r\n    dragging.startDrag(evt, {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... handle dragging events ...\r\n</span>    });\r\n};</pre>\r\n\r\n\r\n<p>The end-points and tangents are computed when dragging commences:</p>\r\n\r\n<pre>dragStarted: function (x, y) {\r\n    var curCoords = controller.translateCoordinates(x, y);\r\n    $scope.draggingConnection = <span class=\"code-keyword\">true</span>;\r\n    $scope.dragPoint1 = flowchart.computeConnectorPos(node, connectorIndex, isInputConnector);\r\n    $scope.dragPoint2 = {\r\n        x: curCoords.x,\r\n        y: curCoords.y\r\n    };\r\n    $scope.dragTangent1 = flowchart.computeConnectionSourceTangent($scope.dragPoint1, $scope.dragPoint2);\r\n    $scope.dragTangent2 = flowchart.computeConnectionDestTangent($scope.dragPoint1, $scope.dragPoint2);\r\n},</pre>\r\n\r\n<p>d<em>raggingConnection</em> has been set to <em>true</em> enabling display of the SVG visual.&nbsp;</p>\r\n\r\n<p>The first end-point is anchored to the connector that was <em>dragged out</em>.\r\nThe second end-point is anchored to the current position of the mouse cursor. </p>\r\n\r\n<p><img alt=\"\" src=\"http://www.codeproject.com/KB/scripting/709340/Connection_dragging.png\"></p>\r\n\r\n\r\n<p>The connection's end-points and tangents are updated repeatedly during dragging:</p>\r\n\r\n<pre>dragging: function (x, y, evt) {\r\n    var startCoords = controller.translateCoordinates(x, y);\r\n    $scope.dragPoint1 = flowchart.computeConnectorPos(node, connectorIndex, isInputConnector);\r\n    $scope.dragPoint2 = {\r\n        x: startCoords.x,\r\n        y: startCoords.y\r\n    };\r\n    $scope.dragTangent1 = flowchart.computeConnectionSourceTangent($scope.dragPoint1, $scope.dragPoint2);\r\n    $scope.dragTangent2 = flowchart.computeConnectionDestTangent($scope.dragPoint1, $scope.dragPoint2);\r\n},</pre>\r\n\r\n\r\n\r\n<p>Upon completion of the drag operation the new connection is committed to the flowchart:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>dragEnded: function () {\r\n    <span class=\"code-keyword\">if</span> ($scope.mouseOverConnector &amp;&amp; \r\n        $scope.mouseOverConnector !== connector) {\r\n        $scope.chart.createNewConnection(connector, $scope.mouseOverConnector);\r\n    }\r\n\r\n    $scope.draggingConnection = <span class=\"code-keyword\">false</span>;\r\n    <span class=\"code-keyword\">delete</span> $scope.dragPoint1;\r\n    <span class=\"code-keyword\">delete</span> $scope.dragTangent1;\r\n    <span class=\"code-keyword\">delete</span> $scope.dragPoint2;\r\n    <span class=\"code-keyword\">delete</span> $scope.dragTangent2;\r\n},</pre>\r\n\r\n<p>The scope variables that are no longer needed are <a href=\"http://perfectionkills.com/understanding-delete/\">deleted</a>. <em>draggingConnection </em>is then set to <em>false</em> to disable rendering of the <em>dragging connection</em> visual.</p>\r\n\r\n<p>Note the single validation rule: <em>A connection cannot be created that loops back to the same connector</em>. If this were production code it would likely have more validation rules or some way of adding user-defined rules.</p>\r\n\r\n<p>If you are interested in the call to <em>translateCoordinates</em>, I'll explain that in <a href=\"#Problems_with_SVG\">Problems with SVG</a>.</p>\r\n\r\n\r\n\r\n<h4><a name=\"Dragging_Service\">Dragging Service</a></h4>\r\n\r\n\r\n<p>The flowchart relies on good handling of mouse input, so it was\r\nreally important to get that right. It is only the flowchart directive\r\nthat talks to the <em>dragging service,</em> the view-model has no knowledge of it. The <em>dragging service</em> in turn depends on the <a href=\"#Mouse_Capture_Service\"><em>mouse capture service</em></a>.</p>\r\n\r\n\r\n\r\n<p>Dragging is necessary in many different applications and it is\r\nsurprisingly tricky to get right. Dragging code directly embedded\r\nin UI code complicates things because you generally\r\nhave to manage the dragging operation as some kind of <em>state machine</em>.\r\nThis can become more painful as different types of dragging\r\noperations are required and\r\ncomplexity grows.There are Javascript libraries and plugins that already\r\ndo this kind of thing, however I wanted to make something\r\nthat worked well with HTML, SVG and AngularJS.  </p>\r\n\r\n<p>The flowchart directive makes use of the dragging directive in the\r\nfollowing ways and we have already examined how these work:</p>\r\n\r\n\r\n<ul><li>Drag selection;</li><li>Node dragging; and</li>\r\n<li>Connection dragging</li></ul>\r\n\r\n\r\n\r\n<p>You can start to imagine, if the dragging wasn't in a\r\nseparate reusable library, how the flowchart directive\r\n(though&nbsp;relatively simple) could get very complicated, having all\r\nthree dragging\r\noperations handled directly. <a href=\"http://c2.com/cgi/wiki?EventDrivenProgramming\">Event driven programming</a>\r\ncomes to our rescue and Javascript has particular good support for this\r\nwith its anonymous functions that we use to define inline callbacks for\r\nevents.</p>\r\n\r\n<p><em>startDrag</em> must be called to initate the dragging operation. This is intended to be called in response to a <em>mouse down</em> event.<em> </em>Anonymous functions to handle the dragging events are passed as parameters:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>dragging.startDrag(evt, {\r\n    dragStarted: function (x, y) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... event handler ...\r\n</span>    },\r\n\r\n    dragging: function (x, y, evt) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... event handler ...\r\n</span>    },\r\n\r\n    dragEnded: function () {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... event handler ...\r\n</span>    },\r\n\r\n    clicked: function () {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... event handler ...\r\n</span>    },\r\n});</pre>\r\n\r\n\r\n\r\n\r\n<p><em>dragStarted</em>, <em>dragging</em> and <em>dragEnded</em> are invoked for key events during the dragging operation. <em>clicked</em> is invoked when a <em>mouse down </em>is followed by a <em>mouse up </em>but\r\nno dragging has occurred (or\r\nat least the mouse has not moved beyond a small threshold). This is considered to be\r\na <em>mouse click</em> rather than a <em>mouse drag</em>.</p>\r\n\r\n\r\n\r\n<p>The implementation of the service is in <em>dragging_service.js</em>. An <a href=\"http://docs.angularjs.org/guide/module\">AngularJS module</a> is defined at the start:</p>\r\n\r\n<pre>angular.module(<span class=\"code-string\">'</span><span class=\"code-string\">dragging'</span>, [<span class=\"code-string\">'</span><span class=\"code-string\">mouseCapture'</span>, ] )</pre>\r\n\r\n\r\n\r\n\r\n<p>The <em>dragging </em>module depends on the <em>mouseCapture</em> module. The rest of the file contains the definition of the <a href=\"http://docs.angularjs.org/guide/dev_guide.services.understanding_services\">service</a>:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>.factory(<span class=\"code-string\">'</span><span class=\"code-string\">dragging'</span>, function ($rootScope, mouseCapture) {\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>\r\n    <span class=\"code-keyword\">return</span> {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... functions exported by the service ...\r\n</span>    };\r\n})\r\n;</pre>\r\n\r\n<p>The object returned by the factory function is the actual service. The service is registered under the name <em>dragging</em> so that AngularJS can instantiate the service when it needs to be dependency injected into the <em>FlowChartController</em> as the <em>dragging </em>parameter.</p>\r\n\r\n<p>The service exports the single function <em>startDrag </em>which we have already used several times:</p>\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">return</span> {\r\n    startDrag: function (evt, config) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ...\r\n</span>    },\r\n};</pre>\r\n\r\n\r\n\r\n<p>The parameters to <em>startDrag </em>are the event object for the <em>mouse down </em>event and a configuration object containing the event handlers. <em>startDrag </em><a href=\"http://stackoverflow.com/questions/942357/what-does-it-mean-to-capture-the-mouse-in-wpf\"><em>captures the mouse</em></a><em> </em>for the duration of the dragging operation. The nested functions handle <em>mouse events </em>during the capture so&nbsp;that it may monitor the state of the mouse:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>startDrag: function (evt, config) {\r\n    var dragging = <span class=\"code-keyword\">false</span>;\r\n    var x = evt.pageX;\r\n    var y = evt.pageY;\r\n\r\n    var mouseMove = function (evt) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... handle mouse move events during dragging ...\r\n</span>    };\r\n\r\n    var released = function() {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... handle release of mouse capture and end dragging ...\r\n</span>    };\r\n\r\n    var mouseUp = function (evt) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... handle mouse up and release the mouse capture ...\r\n</span>    };\r\n\r\n    mouseCapture.acquire(evt, {\r\n        mouseMove: mouseMove,\r\n        mouseUp: mouseUp,\r\n        released: released,\\\r\n    });\r\n\r\n    evt.stopPropagation();\r\n    evt.preventDefault();\r\n},</pre>\r\n\r\n\r\n<p>Calling <em>mouseCapture.acquire </em>captures the mouse and the\r\nservice subsequently handles mouse input events. This allows the\r\ndragging operation to be initiated for a sub-element of the page (via a\r\n<em>mouse down</em> on that element) with dragging then handled by events on a parent element (in this case the <em>body</em> element). In Windows programming <em>mouse capture</em>\r\nis supported by the operating system. When working within the browser\r\nhowever this must be implemented manually, so I created a custom <em>mouse capture</em> service which is discussed in the <a href=\"#Mouse_Capture_Service\">next section</a>. </p>\r\n\r\n<p>Note that <em>startDrag</em> stops propagation of the DOM event and\r\nprevents the default action, the dragging service provides\r\ncustom input handling so we prevent the browser's default action.</p>\r\n\r\n\r\n\r\n<p>Let's look at the mouse event handlers that are active during dragging. The <em>mouse move</em> handler has two personalities. Before dragging\r\nhas started it continuously checks the mouse coordinates to see if they\r\nmove beyond a small threshold. When that happens the dragging operation\r\ncommences and <em>dragStarted</em> is called.</p>\r\n\r\n<p>From then on dragging is in progress and the <span style=\"font-style: italic;\">mouseMove</span> continuously tracks the coordinates of the mouse and repeatedly\r\ncalls the <em>dragging</em> function.</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>var mouseMove = function (evt) {\r\n    <span class=\"code-keyword\">if</span> (!dragging) {\r\n        <span class=\"code-keyword\">if</span> (evt.pageX - x &gt; threshold ||\r\n            evt.pageY - y &gt; threshold) {\r\n            dragging = <span class=\"code-keyword\">true</span>;\r\n\r\n            <span class=\"code-keyword\">if</span> (config.dragStarted) {\r\n                config.dragStarted(x, y, evt);\r\n            }\r\n\r\n            <span class=\"code-keyword\">if</span> (config.dragging) {\r\n                <span class=\"code-comment\">//</span><span class=\"code-comment\"> First 'dragging' call to take into account that we have \r\n</span>                <span class=\"code-comment\">//</span><span class=\"code-comment\"> already moved the mouse by a 'threshold' amount.\r\n</span>                config.dragging(evt.pageX, evt.pageY, evt);\r\n            }\r\n        }\r\n    }\r\n    <span class=\"code-keyword\">else</span> {\t\r\n        <span class=\"code-keyword\">if</span> (config.dragging) {\r\n            config.dragging(evt.pageX, evt.pageY, evt);\r\n        }\r\n\r\n        x = evt.pageX;\r\n        y = evt.pageY;\r\n    }\r\n};</pre>\r\n\r\n\r\n<p>The <em>release </em>handler is called when mouse capture has been released.  This can happen in one of two ways. The <em>mouse up</em>\r\nhandler has stopped the dragging operation and requested that the mouse\r\nbe released. Alternatively&nbsp;if some other code has acquired the mouse capture\r\nwhich forces a release. <em>release </em>also has two personalities, if dragging was in progress it invokes <em>dragEnded</em>.  If dragging never commenced, because the mouse never moved beyond the threshold, <em>clicked </em>is instead invoked to indicate that dragging never started and the user simply <em>mouse-clicked</em>.</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>var released = function() {\r\n    <span class=\"code-keyword\">if</span> (dragging) {\r\n        <span class=\"code-keyword\">if</span> (config.dragEnded) {\r\n            config.dragEnded();\r\n        }\r\n    }\r\n    <span class=\"code-keyword\">else</span> {\r\n        <span class=\"code-keyword\">if</span> (config.clicked) {\t\r\n            config.clicked();\r\n        }\r\n    }\r\n};</pre>\r\n\r\n\r\n<p>The <em>mouse up</em> handler is simple<em>, </em>it just releases the mouse capture (which invokes the <em>release</em> handler) and stops propagation of the event.</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>var mouseUp = function (evt) {\r\n    mouseCapture.release();\r\n    evt.stopPropagation();\r\n    evt.preventDefault();\r\n};</pre>\r\n\r\n\r\n\r\n\r\n<h4><a name=\"Mouse_Capture_Service\">Mouse Capture Service</a></h4>\r\n\r\n<p><a href=\"http://stackoverflow.com/questions/942357/what-does-it-mean-to-capture-the-mouse-in-wpf\">Mouse capture</a>\r\nis used as a matter of course when developing a Windows\r\napplication. When <em>mouse capture</em> is <em>acquired</em> we are able to specially handle the mouse events for an element until\r\nthe capture is <em>released</em>. When working in the browser there appears to be no\r\nbuilt-in way to achieve this. Using an <a href=\"http://docs.angularjs.org/guide/directive\"><em>AngularJS directive</em></a><em> </em>and a <a href=\"http://docs.angularjs.org/guide/dev_guide.services.understanding_services\"><em>service</em></a> I was able to create my own custom attribute that attaches this behavior to the DOM.</p>\r\n\r\n<p>The <em>mouse-capture</em> attribute identifies the element that can <em>capture the mouse</em>. In the flowchart application <span style=\"font-style: italic;\">mouse-capture </span>is applied to the body of the HTML page:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre><span class=\"code-keyword\">&lt;</span><span class=\"code-leadattribute\">body</span>\r\n    <span class=\"code-attribute\">ng-app</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">app\"</span>\r\n    <span class=\"code-attribute\">ng-controller</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">AppCtrl\"</span>\r\n    <span class=\"code-attribute\">mouse-capture</span>\r\n    <span class=\"code-attribute\">ng-keydown</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">keyDown($event)\"</span>\r\n    <span class=\"code-attribute\">ng-keyup</span><span class=\"code-keyword\">=\"</span><span class=\"code-keyword\">keyUp($event)\"</span>\r\n    <span class=\"code-keyword\">&gt;</span>\r\n\r\n    <span class=\"code-keyword\">&lt;!--</span><span class=\"code-keyword\"><span class=\"code-comment\"> ... </span>--&gt;</span>\r\n<span class=\"code-keyword\">&lt;</span><span class=\"code-keyword\">/</span><span class=\"code-leadattribute\">body</span><span class=\"code-keyword\">&gt;</span></pre>\r\n\r\n\r\n<p>The small directive that implements this attribute is at the end of <em>mouse_capture_directive.js</em>. The rest of the file implements&nbsp;the service that is used to <em>acquire the mouse capture</em>.</p>\r\n\r\n<p>The file starts by registering the module:</p>\r\n\r\n<pre>angular.module(<span class=\"code-string\">'</span><span class=\"code-string\">mouseCapture'</span>, [])</pre>\r\n\r\n\r\n\r\n<p>This module has no dependencies, hence the empty array. </p>\r\n\r\n<p>Next the service is registered:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>.factory(<span class=\"code-string\">'</span><span class=\"code-string\">mouseCapture'</span>, function ($rootScope) {\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... setup and event handlers ...\r\n</span>\r\n    <span class=\"code-keyword\">return</span> {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... functions exported by the service ...\r\n</span>    };\r\n})</pre>\r\n\r\n\r\n\r\n<p>This is quite a big one and we'll come back to it in a moment. At\r\nthe end of the file is a directive with the same name as the service:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>.directive(<span class=\"code-string\">'</span><span class=\"code-string\">mouseCapture'</span>, function () {\r\n    <span class=\"code-keyword\">return</span> {\r\n        restrict: <span class=\"code-string\">'</span><span class=\"code-string\">A'</span>,\r\n        controller: function($scope, $element, $attrs, mouseCapture) {\r\n            mouseCapture.registerElement($element);\r\n        },\r\n    };\r\n})\r\n;</pre>\r\n\r\n<p>Both the service and the directive&nbsp;can have the same name\r\nbecause they are used in different contexts. The service is dependency\r\ninjected into Javascript functions and the directive is used as a HTML\r\nattribute (hence the <em>restrict: 'A'</em>), so their usage does not overlap.</p>\r\n\r\n<p>The directive defines a controller that it is initialized when the DOM is loaded.  The <em>mouseCapture </em>service\r\nitself is injected into the controller along with the DOM element. The\r\ndirective uses the service to register the element for <em>mouse capture</em>, this is the element for which <em>mouse move</em> and <em>mouse up</em> will be handled during the capture.</p>\r\n\r\n<p>Going back to the service. The factory function defines several mouse event handlers before returning the service:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>.factory(<span class=\"code-string\">'</span><span class=\"code-string\">mouseCapture'</span>, function ($rootScope) {\r\n\r\n    <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... state variables ...\r\n</span>\r\n    var mouseMove = function (evt) {   \t\t\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... handle mouse movement while the mouse is captured ...\r\n</span>    };\r\n\r\n    var mouseUp = function (evt) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... handle mouse up while the mouse is capture ...\r\n</span>    };\r\n\r\n    <span class=\"code-keyword\">return</span> {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... functions exported by the service ...\r\n</span>    };\r\n})</pre>\r\n\r\n\r\n\r\n<p>The handlers are dynamically attached to the DOM when\r\nmouse capture is acquired and detached when mouse capture is\r\nreleased. </p>\r\n\r\n<p>The service itself exports three functions:</p>\r\n\r\n<pre><span class=\"code-keyword\">return</span> {\r\n    registerElement: function(element) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... register the DOM element whose mouse events will be hooked ...\r\n</span>    },\r\n\r\n    acquire: function (evt, config) {\r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... acquires the mouse capture ...\r\n</span>    },\r\n\r\n    release: function () {  \r\n        <span class=\"code-comment\">//</span><span class=\"code-comment\"> ... releases the mouse capture ...\r\n</span>    },\r\n};</pre>\r\n\r\n<p><em>registerElement</em> is simple, it caches the single element whose mouse events can be captured (in this case the <em>body </em>element).</p>\r\n\r\n<pre>registerElement: function(element) {\r\n    $element = element;\r\n},</pre>\r\n\r\n<p><em>acquire</em> releases any previous mouse capture, caches the configuration object and binds the event handlers:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>acquire: function (evt, config) {\r\n    <span class=\"code-keyword\">this</span>.release();\r\n    mouseCaptureConfig = config;\r\n    $element.mousemove(mouseMove);\r\n    $element.mouseup(mouseUp);\r\n},</pre>\r\n\r\n<p><em>release</em> invokes the <em>released </em>event handler and unbinds the event handlers:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>release: function () {\r\n    <span class=\"code-keyword\">if</span> (mouseCaptureConfig) {\r\n        <span class=\"code-keyword\">if</span> (mouseCaptureConfig.released) {\r\n            mouseCaptureConfig.released();\r\n        }\r\n\r\n        mouseCaptureConfig = null;\r\n    }\r\n\r\n    $element.unbind(<span class=\"code-string\">\"</span><span class=\"code-string\">mousemove\"</span>, mouseMove);\r\n    $element.unbind(<span class=\"code-string\">\"</span><span class=\"code-string\">mouseup\"</span>, mouseUp);\r\n},</pre>\r\n\r\n\r\n<p>While the mouse is captured&nbsp;<em>mouseMove</em> and <em>mouseUp</em> are invoked to handle mouse events, the events are relayed to higher-level code (such as the <em>dragging service</em>).</p>\r\n\r\n<p><em>mouseMove</em> are <em>mouseUp</em> are pretty similar, so let's just look at&nbsp;<span style=\"font-style: italic;\">mouseMove</span>:</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<pre>var mouseMove = function (evt) {\r\n    <span class=\"code-keyword\">if</span> (mouseCaptureConfig &amp;&amp; mouseCaptureConfig.mouseMove) {\r\n        mouseCaptureConfig.mouseMove(evt);\r\n        $rootScope.$digest();\r\n    }\r\n};</pre>\r\n\r\n<p>The&nbsp;<a href=\"http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$digest\"><em>$digest</em></a><em> </em>function must be&nbsp;called to make AngularJS aware of&nbsp;data-model changes made by clients of the <em>mouse capture </em>service. AngularJS needs to know when the data-model has changed so that it can \r\nre-render the DOM as necessary. Most of the time when writing an AngularJS\r\napplication you don't need to know about <span style=\"font-style: italic;\">$digest</span>,\r\nit only comes into play&nbsp;when you are working at a low-level in a\r\ndirective or a service and usually working directly with the DOM.</p>\r\n\r\n<h2>Problems</h2>\r\n\r\n<h3><span>Problems with Web UI</span></h3>\r\n\r\n<p>Client-side web development is fraught with problems and this is obvious to anyone who has been engaged in it. \r\nUsing\r\nlibraries such as jQuery and frameworks like AngularJS goes a long way\r\nto avoiding problems. Using Javascript appropriately (thanks Mr\r\nCrockford!) and having your code scaffolded by unit-tests goes even\r\nfurther to avoiding traditional issues. Good software development\r\nskills and an understanding of appropriate patterns help tremendously\r\nto avoid the Javascript maintenance and debugging nightmares of the\r\npast.</p>\r\n\r\n<p>Even with all the problems associated with client-side web\r\ndevelopment I think I actually prefer it to regular application\r\ndevelopment. As a professional software developer I do a bit of both,\r\nbut if possible in the future I may consider developing desktop\r\napplications as stand-alone web applications. The productivity boost\r\nassociated with not having to use a compiler (unless you want to) and\r\nalso the possibilities that arise from having a skinable application\r\ncan't be overlooked, although I do miss Visual Studio's refactoring support.</p>\r\n\r\n<p>One thing I really missed from Windows desktop programming was being able to <em>capture the mouse </em>and to achieve this I had create my own DIY mouse capture system.</p><h3><span>Problems with AngularJS</span></h3>\r\n<p>Although I had a few issues with AngularJS, I want to be completely\r\nclear: AngularJS is awesome. It makes client-side web development so\r\nmuch easier to the point where it has pretty much convinced me that\r\nthis is the better way to make UIs over and above WPF.</p>\r\n\r\n<p>Since I first started this project AngularJS has evolved. Support for <em>ng-attr-</em>\r\nwas added recently and appears be specifically to solve problems with\r\ndata-binding attributes on SVG elements, exactly the problem I was\r\nhaving! This feature was so new and so necessary that originally I had\r\nto clone direct from the AngularJS repository to get early access to\r\nit. It is still so new that the only documentation they appear to have\r\nis part of the <a href=\"http://docs.angularjs.org/guide/directive\">help for directives</a>.</p>\r\n\r\n<p><a href=\"http://docs.angularjs.org/api/ng.directive:ngIf\"><em>ng-if</em></a>\r\nwas another feature that came along during this project and being able\r\nto conditionally display HTML/SVG elements turned out to be very useful.</p>\r\n\r\n<p>The learning curve was steep. This wasn't just AngularJS but\r\nleveling up my web development skills took considerable effort. All\r\ntold though, there were very few problems with AngularJS and the amount\r\nof problems that it solves genuinely out-weighted its learning curve or\r\nany problems I had using it.</p>\r\n\r\n\r\n<h3><span>Problems with SVG</span></h3>\r\n\r\n<p>When I first started integrating AngularJS/jQuery and SVG I hit\r\nmany small problems. To help figure out what I could and couldn't do,\r\nI made a massive test-bed that tested many different aspects of the\r\nintegration. This allowed me to figure out the problem areas that I\r\nwanted to avoid, and find solutions for the areas that I couldn't avoid.\r\n</p>\r\n\r\n<p>Creating the test-bed allowed me to work through the issues and improve my\r\nunderstanding of SVG and how it interacts with AngularJS features such\r\nas <em>ng-repeat</em>. I discovered that it was very difficult to create\r\ndirectives that inject SVG elements underneath the root SVG element.\r\nThis appears to be due to jQuery creating elements in the HTML\r\nnamespace rather than the SVG namespace. AngularJS uses jQuery under\r\nthe hood so instantiating portions of SVG templates causes the elements\r\nnot to be SVG elements at all, which clearly doesn't help. This is a\r\nwell known problem when creating SVG elements with jQuery (if you guys\r\nare listening, please just fix it!) and there is a fair amount of\r\ninformation out there that will show you the hoops to jump through as a\r\nworkaround. In the flowchart application though I was able to avoid the\r\nnamespace problem completely by containing all my SVG under the one\r\nsingle template with the namespace explicitly specified in the SVG\r\nelement.</p>\r\n\r\n<p>\r\nUnfortunately the SVG DOM is different to the HTML DOM and so many jQuery functions that you might expect to work don't (although some do work fine). A notable example is with setting the class of an element. As this doesn't work for SVG when using jQuery, it doesn't work for AngularJS either, which builds on jQuery. So <a href=\"http://docs.angularjs.org/api/ng.directive:ngClass\">ng-class</a> can't be used. This is why I have been forced to use <em>ng-attr-class</em> multiple times in the SVG for conditionally setting the class. This isn't such a bad option anyway as I think <em>ng-attr-class</em> is easier to understand than the alternatives, even though it does have the limitation of only being able to apply a single class to an\r\nelement at a time. In other cases (eg, the <a href=\"#Mouse_Over_and_SVG_Hit_Testing\">mouse over</a> code)\r\nI have worked around the class problem by avoiding jQuery and using custom functions for checking SVG class. Thanks to Justin McCandless for sharing <a href=\"http://www.justinmccandless.com/blog/Patching+jQuery%27s+Lack+of+SVG+Support\">his solution</a> to this problem.</p>\r\n\r\n<p>There are existing libraries that help deal with jQuery's bad SVG support. The <a href=\"#http://keith-wood.name/svg.html\">jQuery SVG</a> plugin looks good, but only if you want to create and manipulate SVG programatically. I was keen to define the SVG declaratively using an AngularJS template.</p>\r\n\r\n<p>By implementing my own code for hit testing and mouse-over, I avoided potential problems with jQuery's mouseenter/mouseleave events relating to SVG. For this using the extremely simple function <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.elementFromPoint\"><em>elementFromPoint</em></a> seemed like the most convenient option.\r\n</p>\r\n\r\n<p>Another jQuery problem I had was with the <em>offset</em> function.\r\nOriginally I was using this to translate page coordinates into SVG\r\ncoordinates. For some reason this didn't work properly under <em>Firefox</em>. After <a href=\"http://forums.mozillazine.org/viewtopic.php?f=25&amp;t=1930181\">research online</a> I created the <em>translateCoordinates</em> function that uses the SVG API to achieve the translation.</p>\r\n\r\n<p>Another issue under Firefox was that the <em>fill </em>property for an <em>SVG rect</em> cannot be set using CSS. This worked in other browsers, but under Firefox I had to change it so <em>fill</em> had to be set as an attribute of the <em>rect</em> rather than via CSS.</p>\r\n\r\n<p>I had one other problem that is worth mentioning. It was very odd and I never completely figured it out. I had nested <em>SVG g</em> elements representing a connection with <em>ng-repeat </em>applied\r\nto it to render multiple connections (that is a <em>g</em> nested within another\r\n<em>g</em>). When there were no connections (resulting in the <em>ng-repeat</em> displaying nothing) every SVG element after the connections was blown away. Just gone! The nested <em>g</em> element was actually redundant so I was able to cut it down to a single <em>g</em>\r\ncontaining the visuals for a connection. That fixed this very unusual\r\nproblem. I tested out the problem under HTML instead of SVG and didn't\r\nget the issue, so I assume that it only manifests when using SVG under\r\nAngularJS (or possibly something to do with jQuery).</p>\r\n\r\n<h2><a name=\"Conclusion\">Conclusion</a></h2>\r\n\r\n<p>This is the end of the article. &nbsp;Thanks for taking the time to read it.&nbsp;</p><p>Any\r\nfeedback or bug reports you give will be greatly appreciated and I'll\r\nendeavor to update the article and code as appropriate. &nbsp;I'll\r\nleave you with some ideas for the future and links to useful resources.</p>\r\n\r\n<p><h3>Future Improvements</h3></p>\r\n<p>The future improvements that could be applied to this code are simply the features that were in NetworkView from the <a href=\"http://www.codeproject.com/Articles/182683/NetworkView-A-WPF-custom-control-for-visualizing-a\">original article</a>: </p>\r\n\r\n<ul><li>Templating to support different kind of nodes</li><li>Adorners for feedback</li><li>Zooming and panning</li></ul>\r\n\r\n<h3><span>Resources</span></h3>\r\n<p>AngularJS:</p>\r\n<p><a href=\"http://angularjs.org/\">http://angularjs.org/</a></p>\r\n<p><a href=\"http://docs.angularjs.org/api\">http://docs.angularjs.org/api</a></p>\r\n\r\n\r\n<p>jQuery:</p>\r\n<p><a href=\"http://jquery.com/\">http://jquery.com/</a></p>\r\n\r\n\r\n<p>SVG:</p>\r\n<p><a href=\"http://www.w3schools.com/svg/\">http://www.w3schools.com/svg/</a></p>\r\n\r\n<p>Jasmine:</p>\r\n<p><a href=\"http://pivotal.github.io/jasmine/\">http://pivotal.github.io/jasmine/</a></p><p>Test Driven Development:</p><a href=\"http://net.tutsplus.com/tutorials/php/the-newbies-guide-to-test-driven-development/\">http://net.tutsplus.com/tutorials/php/the-newbies-guide-to-test-driven-development/</a><p><a href=\"http://pivotal.github.io/jasmine/\"></a></p>\r\n\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t\t<div class=\"float-right\" style=\"margin:20px 0 0 10px;border:1px solid #ccc\">\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t</div>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}